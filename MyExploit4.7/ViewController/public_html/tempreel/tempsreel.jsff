<?xml version='1.0' encoding='UTF-8'?>
<ui:composition xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:af="http://xmlns.oracle.com/adf/faces/rich"
                xmlns:f="http://java.sun.com/jsf/core" xmlns:c="http://java.sun.com/jsp/jstl/core">
    <c:set var="viewcontrollerBundle" value="#{adfBundle['com.soretrak.view.ViewControllerBundle']}"/>
    <af:panelStretchLayout id="psl1" startWidth="50px">
        <f:facet name="start"/>
        <f:facet name="end"/>
        <f:facet name="top"/>
        <f:facet name="bottom"/>
        <f:facet name="center">
            <af:panelSplitter id="ps1" positionedFromEnd="true" splitterPosition="272" orientation="vertical">
                <f:facet name="first">
                    <af:panelBox text="#{viewcontrollerBundle.GoogleMap}" id="pb3">
                        <f:facet name="toolbar">
                            <af:panelGroupLayout id="pgl2" layout="horizontal">
                                <af:inputDate value="#{bindings.Dedated.inputValue}" readOnly="true"
                                              label="#{bindings.Dedated.hints.label}"
                                              required="#{bindings.Dedated.hints.mandatory}"
                                              columns="#{bindings.Dedated.hints.displayWidth}"
                                              shortDesc="#{bindings.Dedated.hints.tooltip}" id="id1">
                                    <f:validator binding="#{bindings.Dedated.validator}"/>
                                    <af:convertDateTime pattern="#{bindings.Dedated.format}"/>
                                </af:inputDate>
                                <af:spacer width="10" height="10" id="s5"/>
                                <af:panelLabelAndMessage label="#{bindings.Decodvh.hints.label}" id="plam1">
                                    <af:outputText value="#{bindings.Decodvh.inputValue}"
                                                   shortDesc="#{bindings.Decodvh.hints.tooltip}" id="ot1"/>
                                </af:panelLabelAndMessage>
                                <af:spacer width="10" height="10" id="s6"/>
                                <af:inputDate value="#{bindings.Timestart.inputValue}" readOnly="true"
                                              label="#{bindings.Timestart.hints.label}"
                                              required="#{bindings.Timestart.hints.mandatory}"
                                              columns="#{bindings.Timestart.hints.displayWidth}"
                                              shortDesc="#{bindings.Timestart.hints.tooltip}" id="id2">
                                    <f:validator binding="#{bindings.Timestart.validator}"/>
                                    <af:convertDateTime pattern="#{bindings.Timestart.format}"/>
                                </af:inputDate>
                                <af:spacer width="10" height="10" id="s7"/>
                                <af:inputDate value="#{bindings.Timeend.inputValue}" readOnly="true"
                                              label="#{bindings.Timeend.hints.label}"
                                              required="#{bindings.Timeend.hints.mandatory}"
                                              columns="#{bindings.Timeend.hints.displayWidth}"
                                              shortDesc="#{bindings.Timeend.hints.tooltip}" id="id3">
                                    <f:validator binding="#{bindings.Timeend.validator}"/>
                                    <af:convertDateTime pattern="#{bindings.Timeend.format}"/>
                                </af:inputDate>
                                <af:spacer width="10" height="10" id="s8"/>
                                <af:selectOneChoice value="#{bindings.Planning.inputValue}"
                                                    label="#{bindings.Planning.label}"
                                                    required="#{bindings.Planning.hints.mandatory}"
                                                    shortDesc="#{bindings.Planning.hints.tooltip}" readOnly="true"
                                                    id="soc1">
                                    <f:selectItems value="#{bindings.Planning.items}" id="si1"/>
                                    <f:validator binding="#{bindings.Planning.validator}"/>
                                </af:selectOneChoice>
                                <af:spacer width="10" height="10" id="s9"/>
                                <af:selectOneChoice value="#{bindings.Stations.inputValue}"
                                                    label="#{bindings.Stations.label}"
                                                    required="#{bindings.Stations.hints.mandatory}"
                                                    shortDesc="#{bindings.Stations.hints.tooltip}" readOnly="true"
                                                    id="soc2">
                                    <f:selectItems value="#{bindings.Stations.items}" id="si2"/>
                                    <f:validator binding="#{bindings.Stations.validator}"/>
                                </af:selectOneChoice>
                                <af:inputText value="#{bindings.Idgps.inputValue}" label="#{bindings.Idgps.hints.label}"
                                              required="#{bindings.Idgps.hints.mandatory}" readOnly="true"
                                              columns="#{bindings.Idgps.hints.displayWidth}"
                                              maximumLength="#{bindings.Idgps.hints.precision}"
                                              shortDesc="#{bindings.Idgps.hints.tooltip}" id="it2" rendered="false">
                                    <f:validator binding="#{bindings.Idgps.validator}"/>
                                </af:inputText>
                                <af:inputText value="#{bindings.Decodvh1.inputValue}"
                                              label="#{bindings.Decodvh1.hints.label}"
                                              required="#{bindings.Decodvh1.hints.mandatory}" readOnly="true"
                                              columns="#{bindings.Decodvh1.hints.displayWidth}"
                                              maximumLength="#{bindings.Decodvh1.hints.precision}"
                                              shortDesc="#{bindings.Decodvh1.hints.tooltip}" id="it3" rendered="false">
                                    <f:validator binding="#{bindings.Decodvh1.validator}"/>
                                </af:inputText>
                                <af:spacer width="50" height="10" id="s1"/>
                                <af:separator id="s10"/>
                                <af:button text="Retour" id="b1" action="back"/>
                                <af:spacer width="10" height="10" id="s4"/>
                                <af:button actionListener="#{bindings.ListStationTimePlan.execute}"
                                           text="ListStationTimePlan"
                                           disabled="#{!bindings.ListStationTimePlan.enabled}" id="b4"/>
                                <af:spacer width="10" height="10" id="s3"/>
                                <af:button text="Simulation" id="b2">
                                    <af:clientListener method="moveMarker" type="click"/>
                                </af:button>
                                <af:spacer width="10" height="10" id="s2"/>
                            </af:panelGroupLayout>
                        </f:facet>
                        <af:group id="g11">
                            <div id="map" xmlns="http://www.w3.org/1999/xhtml" style="width: 100%; height:100%">Â </div>
                            <af:resource type="javascript" source="https://maps.googleapis.com/maps/api/js?v=3.exp"/>
                            <af:resource type="javascript"><?audit suppress oracle.ide.xml.wellformedness-error?>
                              var map;
                              var array = [];
                              var lignes = []
                              var stations = [];
                              var interval;
                              var jsonObj = [];
                              var jsonObjST = [];
                              var latlngbounds;
                              var jsonObjLAST = [];
                              var markers = [];
                              var jsonObjLine = [];

                              var vidgps;
                              var strokeColor = ['#ff0000', '#00ff00', '#0000ff', '#6600cc', '#ff33ff', '#9999ff', '#000000','CC0000'];

                              function loadGeoJSONData(data_file, type) {

                                  var http_request = new XMLHttpRequest();
                                  try {
                                      // Opera 8.0+, Firefox, Chrome, Safari
                                      http_request = new XMLHttpRequest();
                                  }
                                  catch (e) {
                                      // Internet Explorer Browsers
                                      try {
                                          http_request = new ActiveXObject("Msxml2.XMLHTTP");

                                      }
                                      catch (e) {

                                          try {
                                              http_request = new ActiveXObject("Microsoft.XMLHTTP");
                                          }
                                          catch (e) {
                                              // Something went wrong
                                              alert("Your browser broke!");
                                              return false;
                                          }

                                      }
                                  }

                                  http_request.onreadystatechange = function () {

                                      if (http_request.readyState == 4) {

                                          // Javascript function JSON.parse to parse JSON data
                                          if (type == 1)
                                              jsonObj = JSON.parse(http_request.responseText);
                                          else if (type == 2)
                                              jsonObjST = JSON.parse(http_request.responseText);
                                          else 
                                              jsonObjLine = JSON.parse(http_request.responseText);

                                          // jsonObj variable now contains the data structure and can
                                          // be accessed as jsonObj.name and jsonObj.country.
                                          //document.getElementById("Name").innerHTML = jsonObj.line.length;
                                          //document.getElementById("Country").innerHTML = jsonObj.line[0].coordinates.length;
                                      }
                                  }

                                  http_request.open("GET", data_file, false);
                                  http_request.send();

                              }

                              function displayTripsFromJson() {

                                  var i, j, k;

                                  var mypath = new Array();

                                  for (j = 0;j &lt; jsonObj.length;j++) {
                                      //console.log(" j : "+ j + " id :" + jsonObj[j].la);
                                      mypath.push(new google.maps.LatLng(jsonObj[j].la, jsonObj[j].lo));

                                      var polyline = new google.maps.Polyline( {
                                          path : mypath, strokeColor : '#0000FF', strokeOpacity : 2.0, strokeWeight : 2
                                      });
                                      polyline.setMap(map);

                                  }
                                  displayPoints();
                              }

                              function moveMarker() {
                                  var iconStation = 'resources/images/school_bus.png';
                                  window.clearInterval(interval);
                                  var marker = new google.maps.Marker( {
                                      position : new google.maps.LatLng(jsonObj[0].la, jsonObj[0].lo), map : map, icon : iconStation
                                  });

                                  //counter = 0;
                                  var j = 0;
                                  var pos;
                                  interval = window.setInterval(function () {
                                      pos = new google.maps.LatLng(jsonObj[j].la, jsonObj[j].lo);
                                      marker.setPosition(pos);

                                      j++;
                                      if (j >= jsonObj.length) {
                                          window.clearInterval(interval);

                                      }
                                      marker.setMap(map);
                                  },
                                  100);

                              }

                              function displayPoints() {
                                  var i, marker1;
                                  var contentString;
                                  var infoWindow = new google.maps.InfoWindow();

                                  latlngbounds = new google.maps.LatLngBounds();
                                  var iconStation = 'resources/images/bus.png';

                                  for (i = 0;i &lt; jsonObj.length;i++) {
                                      marker1 = new google.maps.Marker( {
                                          position : new google.maps.LatLng(jsonObj[i].la, jsonObj[i].lo), title : "Date :" + jsonObj[i].d + "\nVitesse :" + jsonObj[i].v, icon :  {
                                              path : google.maps.SymbolPath.CIRCLE, scale : 2, strokeWeight : 2, strokeColor : "#00ff00"
                                          }
                                      });

                                      google.maps.event.addListener(marker1, 'click', (function (marker1, i) {
                                          return function () {
                                              infoWindow.setContent("Date :" + jsonObj[i].d + "\n Vitesse :" + jsonObj[i].v);
                                              infoWindow.open(map, marker1);
                                          }
                                      })(marker1, i));
                                      marker1.setMap(map);
                                      //Extend each marker's position in LatLngBounds object.
                                      latlngbounds.extend(marker1.position);
                                  }
                                  //Get the boundaries of the Map.
                                  var bounds = new google.maps.LatLngBounds();

                                  //Center map and adjust Zoom based on the position of all markers.
                                  map.setCenter(latlngbounds.getCenter());
                                  map.fitBounds(latlngbounds);

                              }

                              function displayStation() {
                                  var i, marker2;
                                  var contentString;
                                  var infoWindow = new google.maps.InfoWindow();

                                  var latlngbounds = new google.maps.LatLngBounds();
                                  var iconStation = 'resources/images/bus.png';

                                  for (i = 0;i &lt; jsonObjST.length;i++) {
                                      marker2 = new google.maps.Marker( {
                                          position : new google.maps.LatLng(jsonObjST[i].l, jsonObjST[i].g), title : "Nom :" + jsonObjST[i].t, icon : iconStation
                                      });

                                      google.maps.event.addListener(marker2, 'click', (function (marker2, i) {
                                          return function () {
                                              infoWindow.setContent("Nom :" + jsonObjST[i].t);
                                              infoWindow.open(map, marker2);
                                          }
                                      })(marker2, i));
                                      marker2.setMap(map);
                                      //Extend each marker's position in LatLngBounds object.
                                  }
                                  //Get the boundaries of the Map.
                              }

                              function HideStation() {
                                  var i, marker2;
                                  var contentString;
                                  var infoWindow = new google.maps.InfoWindow();

                                  var latlngbounds = new google.maps.LatLngBounds();
                                  var iconStation = 'resources/images/bus.png';

                                  for (i = 0;i &lt; jsonObjST.length;i++) {
                                      marker2 = new google.maps.Marker( {
                                          position : new google.maps.LatLng(jsonObjST[i].l, jsonObjST[i].g), title : "Nom :" + jsonObjST[i].t, icon : iconStation
                                      });

                                      marker2.setMap(map);
                                      //Extend each marker's position in LatLngBounds object.
                                  }
                                  //Get the boundaries of the Map.
                              }

                              function loadPlanning(lines, stopsTimes, centre) {
                                  lignes = JSON.parse(lines);
                                  stations = JSON.parse(stopsTimes);

                                  var data_file;

                                  switch (centre) {
                                      case "1":
                                          data_file = "https://dl.dropboxusercontent.com/u/50101013/interurbain.json";
                                          break;
                                      case "2":
                                          data_file = "https://dl.dropboxusercontent.com/u/50101013/urbain.json";
                                          break;
                                      case "3":
                                          data_file = "https://dl.dropboxusercontent.com/u/50101013/suburbain.json";
                                          break;
                                      default :
                                          data_file = "https://dl.dropboxusercontent.com/u/50101013/interurbain.json";
                                  }

                                  loadGeoJSONData(data_file, 3);
                                  displayPlanLines();
                              }

                              function displayPlanLines() {

                                  var i, j, k;
                                 // displayStation();
                                  var mypath = new Array();

                                  for (i = 0;i &lt; lignes.length;i++) {
                                      //console.log("nbre :" +jsonObjLine.line.length + " i:" + i);
                                      for (j = 0;j &lt; jsonObjLine.line.length;j++) {
                                          //console.log(" j : "+ j + " id :" + jsonObjLine.line[j].id);
                                          if (jsonObjLine.line[j].id == lignes[i].ligne) {
                                              console.log("json data :" + jsonObjLine.line[j].id + " nbre : " + jsonObjLine.line[j].coordinates.length);

                                              for (k = 0;k &lt; jsonObjLine.line[j].coordinates.length;k++) {
                                                  console.log("k : " + k);
                                                  mypath.push(new google.maps.LatLng(jsonObjLine.line[j].coordinates[k].lat, jsonObjLine.line[j].coordinates[k].lng));
                                              }
                                              var polyline = new google.maps.Polyline( {
                                                  path : mypath, strokeColor : strokeColor[i], strokeOpacity : 1.0, strokeWeight : 3
                                              });
                                              polyline.setMap(map);
                                              mypath = [];
                                          }
                                      }

                                  }

                              }

                              function initialize(data_file, station_file, lines, stopsTimes, centre) {
                                  var mapOptions = {
                                      zoom : 8, scaleControl : true, center : new google.maps.LatLng(35, 10), mapTypeId : google.maps.MapTypeId.ROAD
                                  };
                                  map = new google.maps.Map(document.getElementById('map'), mapOptions);

                                  loadGeoJSONData(data_file, 1);
                                  loadGeoJSONData(station_file, 2);

                                  displayTripsFromJson();
                                  displayStation();

                                  loadPlanning(lines, stopsTimes, centre);

                              }

                              google.maps.event.addDomListener(window, 'load', initialize(trajet, station_file));
                            </af:resource>
                        </af:group>
                    </af:panelBox>
                </f:facet>
                <f:facet name="second">
                    <af:region value="#{bindings.planning1.regionModel}" id="r1"/>
                </f:facet>
            </af:panelSplitter>
        </f:facet>
    </af:panelStretchLayout>
</ui:composition>
