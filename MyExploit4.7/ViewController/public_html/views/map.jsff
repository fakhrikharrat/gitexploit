<?xml version='1.0' encoding='UTF-8'?>
<ui:composition xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:af="http://xmlns.oracle.com/adf/faces/rich"
                xmlns:f="http://java.sun.com/jsf/core" xmlns:dvt="http://xmlns.oracle.com/dss/adf/faces">
  <af:panelStretchLayout id="psl1">
    <f:facet name="start"/>
    <f:facet name="end"/>
    <f:facet name="top"/>
    <f:facet name="bottom"/>
    <f:facet name="center">
       <af:panelBox text="Google Map" id="pb1">
                        <f:facet name="toolbar">
                        <af:panelGroupLayout id="pgl1">
                            <af:button text="Retour" id="b1" action="back_map"/>
                            
                                        <af:button text="Refresh" id="b4">
                                            <af:clientListener method="reloadpage" type="action"/>
                                        </af:button>
                                        <af:button text="Load Map" id="b3">
                                            <af:clientListener method="load" type="action"/>
                                        </af:button>
                                        <af:button id="b2" clientComponent="true" text="Détail">
                                            <af:clientListener method="detailTrajet" type="action"/>
                                        </af:button>
                                    </af:panelGroupLayout>
                        </f:facet>
        <af:panelSplitter id="ps1" positionedFromEnd="true" splitterPosition="350">
          <f:facet name="first">
            <af:group id="g11">
              <div id="map" xmlns="https://www.w3.org/TR/html5/" style="width: 1100px; height: 800px">
                 
              </div>
              <af:resource type="javascript" source="https://maps.googleapis.com/maps/api/js?v=3.exp"/>
              <af:resource type="javascript" source="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"/>
              <af:resource type="javascript" source="http://www.google-analytics.com/urchin.js"/>
            
             <af:resource type="javascript">
                              var stops;
                              var texte ="";
                              var totkm =0;
                              var totduree = 0;
                              var directionsDisplay;
                              var map=null;
                              var directionsService  ;
                              var myOptions;
                              var bool =false;
                              
                          
                              function reloadpage(actionEvent) {
                                  window.location.reload();   
                                  
                                
                                
                              }  
                            
                              function detailTrajet(actionEvent) {
                                  var buttonComponent = actionEvent.getSource();

                                  //Find the client component for the "greeting" af:outputText
                                  var greetingComponent = buttonComponent.findComponent("it2");

                              //    var greetingComponent1 = buttonComponent.findComponent("b4");
                                //  AdfActionEvent.queue(greetingComponent1, greetingComponent1.getPartialSubmit());
                                 
                                 
                                  //Set the value for the outputText component
                                 greetingComponent.setValue("");
                                 greetingComponent.setValue(texte);
                                  
                                  
                               
                              
                                  

                              }

                              function initialize(stringValue, ligne) {
 
                         
                                  stops = JSON.parse(stringValue);
                                  
                                
                                  totkm =0;
                                  totduree = 0;
                                  
                                 
                                

                                 // directionsDisplay.setMap(null);
                                 
                                   
                                   
                              }
                              
                              function routeV2(){
                                 //Tour_startUp(stops);
                                 Tour_startUp();

                                  //window.tour.loadMap(map, directionsDisplay);
                                  window.tour.loadMap();
                                  //window.tour.fitBounds(map);
                                  window.tour.fitBounds();

                                  if (stops.length > 1)
                                     // window.tour.calcRoute(directionsService, directionsDisplay);
                                     
                                      window.tour.calcRoute();
                                      
                                 setMapStops();
                              
                              }
                             
                             function setMapStops() {
                              for (i = 0;i &lt; stops.length;i++) {
                                  pos = new google.maps.LatLng(stops[i].l, stops[i].g);
                                  var markerletter = "A".charCodeAt(0);
                                  markerletter += i;
                                  markerletter = String.fromCharCode(markerletter);
                                  createMarker(directionsDisplay.getMap(), pos, stops[i].t, "  " , markerletter,i);

                              }
                          }

                              function Tour_startUp() {
                                  if (!window.tour)
                                      window.tour = {
                                          updateStops : function (newStops) {
                                              stops = newStops;
                                          },
                                          // map: google map object
                                          // directionsDisplay: google directionsDisplay object (comes in empty)
                                          //loadMap : function (map, directionsDisplay) {
                                          loadMap : function () {
                                              
                                              map.setOptions(myOptions);
                                              directionsDisplay.setMap(map);
                                          },
                                         // fitBounds : function (map) {
                                          fitBounds : function () {
                                              var bounds = new google.maps.LatLngBounds();

                                              // extend bounds for each record
                                              jQuery.each(stops, function (key, val) {
                                                  var myLatlng = new google.maps.LatLng(val.l, val.g);
                                                  bounds.extend(myLatlng);
                                              });
                                              map.fitBounds(bounds);
                                          },
                                          //calcRoute : function (directionsService, directionsDisplay) {
                                          calcRoute : function () {
                                              var batches = [];
                                              var itemsPerBatch = 10;// google API max = 10 - 1 start, 1 stop, and 8 waypoints
                                              var itemsCounter = 0;
                                              var wayptsExist = stops.length > 0;
                                                    
                                              while (wayptsExist) {
                                                  var subBatch = [];
                                                  var subitemsCounter = 0;

                                                  for (var j = itemsCounter;j &lt; stops.length;j++) {
                                                      subitemsCounter++;
                                                      subBatch.push( {
                                                          location : new google.maps.LatLng(stops[j].l,stops[j].g), stopover : true
                                                      });
                                                      if (subitemsCounter == itemsPerBatch)
                                                          break;
                                                  }

                                                  itemsCounter += subitemsCounter;
                                                  batches.push(subBatch);
                                                  wayptsExist = itemsCounter &lt; stops.length;
                                                  // If it runs again there are still points. Minus 1 before continuing to
                                                  // start up with end of previous tour leg
                                                  itemsCounter--;
                                              }

                                              // now we should have a 2 dimensional array with a list of a list of waypoints
                                              var combinedResults;
                                              var unsortedResults = [{}];// to hold the counter and the results themselves as they come back, to later sort
                                              var directionsResultsReturned = 0;

                                              for (var k = 0;k &lt; batches.length;k++) {
                                                  var lastIndex = batches[k].length - 1;
                                                  var start = batches[k][0].location;
                                                  var end = batches[k][lastIndex].location;

                                                  // trim first and last entry from array
                                                  var waypts = [];
                                                  waypts = batches[k];
                                                  waypts.splice(0, 1);
                                                  waypts.splice(waypts.length - 1, 1);

                                                  var request = {
                                                      origin : start, destination : end, waypoints : waypts, travelMode : google.maps.TravelMode.DRIVING
                                                  };(function (kk) {
                                                      directionsService.route(request, function (result, status) {
                                                          if (status == google.maps.DirectionsStatus.OK) {

                                                              var unsortedResult = {
                                                                  order : kk, result : result
                                                              };
                                                              unsortedResults.push(unsortedResult);

                                                              directionsResultsReturned++;

                                                              if (directionsResultsReturned == batches.length)// we've received all the results. put to map
                                                              {
                                                                  // sort the returned values into their correct order
                                                                  unsortedResults.sort(function (a, b) {
                                                                      return parseFloat(a.order) - parseFloat(b.order);
                                                                  });
                                                                  var count = 0;
                                                                  for (var key in unsortedResults) {
                                                                      if (unsortedResults[key].result != null) {
                                                                          if (unsortedResults.hasOwnProperty(key)) {
                                                                              if (count == 0)// first results. new up the combinedResults object
                                                                                  combinedResults = unsortedResults[key].result;
                                                                              else {
                                                                                  // only building up legs, overview_path, and bounds in my consolidated object. This is not a complete
                                                                                  // directionResults object, but enough to draw a path on the map, which is all I need
                                                                                  combinedResults.routes[0].legs = combinedResults.routes[0].legs.concat(unsortedResults[key].result.routes[0].legs);
                                                                                  combinedResults.routes[0].overview_path = combinedResults.routes[0].overview_path.concat(unsortedResults[key].result.routes[0].overview_path);

                                                                                  combinedResults.routes[0].bounds = combinedResults.routes[0].bounds.extend(unsortedResults[key].result.routes[0].bounds.getNorthEast());
                                                                                  combinedResults.routes[0].bounds = combinedResults.routes[0].bounds.extend(unsortedResults[key].result.routes[0].bounds.getSouthWest());
                                                                              }
                                                                              count++;
                                                                          }
                                                                      }
                                                                  }
                                                                  directionsDisplay.setDirections(combinedResults);
                                                                  var legs = combinedResults.routes[0].legs;
                                                                   //alert(legs.length);
                                                                   var m=0;
                                                                  for (var i = 0;i &lt; legs.length;i++) {
                                                                      var markerletter = "A".charCodeAt(0);
                                                                      markerletter += i;
                                                                      markerletter = String.fromCharCode(markerletter);
                                                                      //createMarker(directionsDisplay.getMap(), legs[i].start_location, "marker" + i, "some text for marker " + i + legs[i].start_address, markerletter);
                                                                      
                                                                      texte +=  stops[m].t +" / "+ stops[++m].t +"  - المسافة :" + legs[i].distance.value/1000+"\n";
                                                                      totkm +=  legs[i].distance.value;
                                                                     
                                                                      //alert(texte);
                                                              
                                                                  }
                                                                  var i = legs.length;
                                                                  var markerletter = "A".charCodeAt(0);
                                                                  markerletter += i;
                                                                  markerletter = String.fromCharCode(markerletter);
                                                                  //createMarker(directionsDisplay.getMap(), legs[legs.length - 1].end_location, "marker" + i, "some text for the " + i + "marker" + legs[legs.length - 1].end_address, markerletter);
                                                                 // texte += stops[m].t +" / "+ stops[++m].t + + " dist :" + legs[legs.length-1].distance.value/1000+ " duree :"+ legs[legs.length-1].duration.value +"\n";
                                                                  //totkm +=  legs[legs.length-1].distance.value;
                                                                  //totduree +=  legs[legs.length -1].duration.value;
                                                                  texte +="Total  Km :"+totkm/1000 +"\n";
                                                                  
                                                                   
                                                              }
                                                          }
                                                      });
                                                  })(k);
                                              }
                                          }
                                      };
                              }
                              var infowindow = new google.maps.InfoWindow( {
                                  size : new google.maps.Size(150, 50)
                              });

                              var icons = new Array();
                              icons["red"] = new google.maps.MarkerImage("mapIcons/marker_red.png", 
                              // This marker is 20 pixels wide by 34 pixels tall.
                                new google.maps.Size(20, 34), 
                                                              // The origin for this image is 0,0.
                                new google.maps.Point(0, 0), 
                                                              // The anchor for this image is at 9,34.
                                new google.maps.Point(9, 34));
                                
                                                              function getMarkerImage(iconStr) {
                                                                  if ((typeof (iconStr) == "undefined") || (iconStr == null)) {
                                                                      iconStr = "red";
                                                                  }
                                                                  if (!icons[iconStr]) {
                                                                      icons[iconStr] = new google.maps.MarkerImage("http://www.google.com/mapfiles/marker" + iconStr + ".png", 
                                                                      // This marker is 20 pixels wide by 34 pixels tall.
                                new google.maps.Size(20, 34), 
                                                                      // The origin for this image is 0,0.
                                new google.maps.Point(0, 0), 
                                                                      // The anchor for this image is at 6,20.
                                new google.maps.Point(9, 34));
                                  }
                                  return icons[iconStr];

                              }
                              // Marker sizes are expressed as a Size of X,Y
                              // where the origin of the image (0,0) is located
                              // in the top left of the image.
                              // Origins, anchor positions and coordinates of the marker
                              // increase in the X direction to the right and in
                              // the Y direction down.
                              var iconImage = new google.maps.MarkerImage('mapIcons/marker_red.png', 
                              // This marker is 20 pixels wide by 34 pixels tall.
                                new google.maps.Size(20, 34), 
                                                              // The origin for this image is 0,0.
                                new google.maps.Point(0, 0), 
                                                              // The anchor for this image is at 9,34.
                                new google.maps.Point(9, 34));
                                                              var iconShadow = new google.maps.MarkerImage('http://www.google.com/mapfiles/shadow50.png', 
                                                              // The shadow image is larger in the horizontal dimension
                                                              // while the position and offset are the same as for the main image.
                                new google.maps.Size(37, 34), new google.maps.Point(0, 0), new google.maps.Point(9, 34));
                              // Shapes define the clickable region of the icon.
                              // The type defines an HTML  element 'poly' which
                              // traces out a polygon as a series of X,Y points. The final
                              // coordinate closes the poly by connecting to the first
                              // coordinate.
                              var iconShape = {
                                  coord : [9, 0, 6, 1, 4, 2, 2, 4, 0, 8, 0, 12, 1, 14, 2, 16, 5, 19, 7, 23, 8, 26, 9, 30, 9, 34, 11, 34, 11, 30, 12, 26, 13, 24, 14, 21, 16, 18, 18, 16, 20, 12, 20, 8, 18, 4, 16, 2, 15, 1, 13, 0], type : 'poly'
                              };

                              function createMarker(map, latlng, label, html, color,i) {
                                  // alert("createMarker("+latlng+","+label+","+html+","+color+")");
                                  var iconStation = 'resources/ico/number_' + i + '.png';
                                  var contentString = '' + label + ' ' + html;
                                  var marker = new google.maps.Marker( {
                                      position : latlng, map : map, shadow : iconShadow, icon : iconStation, shape : iconShape, title : label
                                  });
                                  marker.myname = label;

                                  google.maps.event.addListener(marker, 'click', function () {
                                      infowindow.setContent(contentString);
                                      infowindow.open(map, marker);
                                  });
                                  return marker;
                              }
                            function load() {
                                  
                                  directionsService = new google.maps.DirectionsService();
                                  directionsDisplay = new google.maps.DirectionsRenderer( {
                                      map: map,
                                      suppressMarkers : true,
                                      polylineOptions: {
                                      strokeColor: "red"
                                    }
                                   });
                               
                                map = new google.maps.Map(document.getElementById("map"));
                                  // new up complex objects before passing them around
                                   
                                  
                                   myOptions = {
                                                  zoom : 8, center : new google.maps.LatLng(35,  10), // default to London
                                                  mapTypeId :google.maps.MapTypeId.ROADMAP
                                              };
                                  map.setOptions(myOptions);
                                  
                                  texte ="";
                                  routeV2(); 
                             
                                
                                
                                  
                                  
                                   google.maps.event.addListener(map, 'rightclick', function (event) {
                              alert('Lat: ' + event.latLng.lat() + ' and Longitude is: ' + event.latLng.lng());
                          });
     
                                   
                              
                            }
                            
                           

                              google.maps.event.addDomListener(window, 'load', initialize(stringValue, ligne));
                            </af:resource>
                         
            </af:group>
          </f:facet>
          <f:facet name="second">
            <af:panelBox text="PanelBox1" id="pb2">
            <af:inputText id="it2" clientComponent="true" rows="25" dimensionsFrom="content"
                                              columns="35" contentStyle="font-size:16px;"/>
              <f:facet name="toolbar"/>
            </af:panelBox>
          </f:facet>
        </af:panelSplitter>
                    </af:panelBox>
    </f:facet>
  </af:panelStretchLayout>
</ui:composition>
