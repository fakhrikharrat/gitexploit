<?xml version='1.0' encoding='UTF-8'?>
<ui:composition xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:af="http://xmlns.oracle.com/adf/faces/rich"
                xmlns:f="http://java.sun.com/jsf/core" xmlns:c="http://java.sun.com/jsp/jstl/core">
    <c:set var="viewcontrollerBundle" value="#{adfBundle['com.soretrak.view.ViewControllerBundle']}"/>
    <af:panelSplitter id="ps1" splitterPosition="294">
        <f:facet name="first">
            <af:panelBox text="#{viewcontrollerBundle.Listedesvoyagespargroupe}" id="pb1">
                <f:facet name="toolbar"/>
                <af:panelCollection id="pc1">
                    <f:facet name="menus"/>
                    <f:facet name="toolbar"/>
                    <af:table value="#{bindings.TripsView3.collectionModel}" var="row"
                              rows="#{bindings.TripsView3.rangeSize}"
                              emptyText="#{bindings.TripsView3.viewable ? 'No data to display.' : 'Access Denied.'}"
                              rowBandingInterval="0"
                              selectedRowKeys="#{bindings.TripsView3.collectionModel.selectedRow}"
                              selectionListener="#{bindings.TripsView3.collectionModel.makeCurrent}"
                              fetchSize="#{bindings.TripsView3.rangeSize}" id="t1" columnStretching="column:c2">
                        <af:column headerText="#{bindings.TripsView3.hints.Denumli.label}" id="c1" width="50"
                                   align="center">
                            <af:outputText value="#{row.Denumli}"
                                           shortDesc="#{bindings.TripsView3.hints.Denumli.tooltip}" id="ot1"/>
                        </af:column>
                        <af:column headerText="#{bindings.TripsView3.hints.DirectionId.label}" id="c2" width="60"
                                   align="center">
                            <af:selectOneChoice value="#{row.bindings.DirectionId.inputValue}"
                                                label="#{row.bindings.DirectionId.label}"
                                                required="#{bindings.TripsView3.hints.DirectionId.mandatory}"
                                                shortDesc="#{bindings.TripsView3.hints.DirectionId.tooltip}"
                                                readOnly="true" id="soc1">
                                <f:selectItems value="#{row.bindings.DirectionId.items}" id="si1"/>
                                <f:validator binding="#{row.bindings.DirectionId.validator}"/>
                            </af:selectOneChoice>
                        </af:column>
                        <af:column headerText="#{bindings.TripsView3.hints.TimeDepart.label}" id="c3" width="60"
                                   align="center">
                            <af:outputText value="#{row.TimeDepart}"
                                           shortDesc="#{bindings.TripsView3.hints.TimeDepart.tooltip}" id="ot2">
                                <af:convertDateTime pattern="#{bindings.TripsView3.hints.TimeDepart.format}"/>
                            </af:outputText>
                        </af:column>
                        <af:column id="c4" width="60" align="center"/>
                    </af:table>
                    <f:facet name="statusbar"/>
                </af:panelCollection>
            </af:panelBox>
        </f:facet>
        <f:facet name="second">
            <af:panelBox text="Google Map : Groupe N° #{bindings.Num.inputValue}; Nbre Voy : #{bindings.nbretrips.inputValue}"
                         id="pb2">
                <f:facet name="toolbar">
                    <af:panelGroupLayout id="pgl1">
                        <af:spacer width="10" height="10" id="s3"/>
                        <af:button text="#{viewcontrollerBundle.Retour}" id="b4" action="back"/>
                        <af:spacer width="10" height="10" id="s1"/>
                        <af:button text="#{viewcontrollerBundle.Simulation}" id="b2">
                            <af:clientListener method="moveMarker" type="click"/>
                        </af:button>
                        <af:spacer width="10" height="10" id="s2"/>
                        <af:button text="ListLineGrp" disabled="#{!bindings.ListLineGrp.enabled}" id="b3"
                                   rendered="false"/>
                    </af:panelGroupLayout>
                </f:facet>
                <af:group id="g11">
                    <div id="map" xmlns="http://www.w3.org/1999/xhtml" style="width: 100%; height: 100%"> </div>
                    <af:resource type="javascript" source="https://maps.googleapis.com/maps/api/js?v=3.exp"/>
                    <af:resource type="javascript"
                                 source="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"/>
                    <af:resource type="javascript" source="http://www.google-analytics.com/urchin.js"/>
                    <af:resource type="javascript" source="/js/jquery-1.4.4.js"/>
                    <af:resource type="javascript">
                      var map;
                      var stops;
                      var array = [];
                      var lignes = []
                      var stations = [];
                      var interval;
                      var jsonObj;
                      var strokeColor = ['#ff0000', '#00ff00', '#0000ff', '#6600cc', '#ff33ff', '#9999ff', '#000000'];

                      var directionsDisplay;
                      var directionsService;
                      

                      function moveMarker() {
                          var iconStation = 'resources/images/school_bus.png';
                          window.clearInterval(interval);
                          var marker = new google.maps.Marker( {
                              position : new google.maps.LatLng(stops[0].l, stops[0].g), map : directionsDisplay.getMap(), icon : iconStation
                          });

                          //counter = 0;
                          var j = 0;
                          var pos;
                          interval = window.setInterval(function () {
                              pos = new google.maps.LatLng(stops[j].l, stops[j].g);
                              marker.setPosition(pos);

                              j++;
                              if (j >= stations.length) {
                                  window.clearInterval(interval);

                              }
                              marker.setMap(directionsDisplay.getMap());
                          },
                          1000);

                      }

                      function loadData(listLine, listStation) {
                          lignes = JSON.parse(listLine);
                          stops = JSON.parse(listStation);

                      }

                      function initialize(listLine, listStation, centre) {
                          // new up complex objects before passing them around
                          
                          directionsDisplay = new window.google.maps.DirectionsRenderer( {
                              suppressMarkers : true
                          });
                          directionsService = new window.google.maps.DirectionsService();

                          map = new window.google.maps.Map(document.getElementById("map"));
                          stops = JSON.parse(listStation);
                          //alert(stringValue);
                          //displayStation();
                          calcRoutev2();

                      }

                      function calcRoutev2() {
                          Tour_startUp(stops);

                          window.tour.loadMap(map, directionsDisplay);
                          window.tour.fitBounds(map);

                          if (stops.length > 1)
                              window.tour.calcRoute(directionsService, directionsDisplay);

                          //display stops 
                          //setMapStops(directionsDisplay);
                      }

                      function setMapStops(directionsDisplay) {
                          var pos;
                          for (i = 0;i &lt; stops.length;i++) {
                              pos = new google.maps.LatLng(stops[i].l, stops[i].g);
                              var markerletter = "A".charCodeAt(0);
                              markerletter += i;
                              markerletter = String.fromCharCode(markerletter);

                              createMarker(directionsDisplay.getMap(), pos, stops[i].t, "  " + stops[i].h, markerletter,i);

                          }
                      }

                      function Tour_startUp(stops) {
                          if (!window.tour)
                              window.tour = {
                                  updateStops : function (newStops) {
                                      stops = newStops;
                                  },
                                  // map: google map object
                                  // directionsDisplay: google directionsDisplay object (comes in empty)
                                  loadMap : function (map, directionsDisplay) {
                                      var myOptions = {
                                          zoom : 13, center : new window.google.maps.LatLng(51.507937,  - 0.076188), // default to London
                                          mapTypeId : window.google.maps.MapTypeId.ROADMAP
                                      };
                                      map.setOptions(myOptions);
                                      directionsDisplay.setMap(map);
                                  },
                                  fitBounds : function (map) {
                                      var bounds = new window.google.maps.LatLngBounds();

                                      // extend bounds for each record
                                      jQuery.each(stops, function (key, val) {
                                          //                                              var myLatlng = new window.google.maps.LatLng(val.Geometry.Latitude, val.Geometry.Longitude);
                                          var myLatlng = new window.google.maps.LatLng(val.l, val.g);
                                          bounds.extend(myLatlng);
                                      });
                                      map.fitBounds(bounds);
                                  },
                                  calcRoute : function (directionsService, directionsDisplay) {
                                      var batches = [];
                                      var itemsPerBatch = 10;// google API max = 10 - 1 start, 1 stop, and 8 waypoints
                                      var itemsCounter = 0;
                                      var wayptsExist = stops.length > 0;

                                      while (wayptsExist) {
                                          var subBatch = [];
                                          var subitemsCounter = 0;

                                          for (var j = itemsCounter;j &lt; stops.length;j++) {
                                              subitemsCounter++;
                                              subBatch.push( {
                                                  //                                                      location : new window.google.maps.LatLng(stops[j].Geometry.Latitude, stops[j].Geometry.Longitude), stopover : true
                                                  location : new window.google.maps.LatLng(stops[j].l, stops[j].g), stopover : true
                                              });
                                              if (subitemsCounter == itemsPerBatch)
                                                  break;
                                          }

                                          itemsCounter += subitemsCounter;
                                          batches.push(subBatch);
                                          wayptsExist = itemsCounter &lt; stops.length;
                                          // If it runs again there are still points. Minus 1 before continuing to
                                          // start up with end of previous tour leg
                                          itemsCounter--;
                                      }

                                      // now we should have a 2 dimensional array with a list of a list of waypoints
                                      var combinedResults;
                                      var unsortedResults = [{}];// to hold the counter and the results themselves as they come back, to later sort
                                      var directionsResultsReturned = 0;

                                      for (var k = 0;k &lt; batches.length;k++) {
                                          var lastIndex = batches[k].length - 1;
                                          var start = batches[k][0].location;
                                          var end = batches[k][lastIndex].location;

                                          // trim first and last entry from array
                                          var waypts = [];
                                          waypts = batches[k];
                                          waypts.splice(0, 1);
                                          waypts.splice(waypts.length - 1, 1);

                                          var request = {
                                              origin : start, destination : end, waypoints : waypts, travelMode : window.google.maps.TravelMode.WALKING
                                          };(function (kk) {
                                              directionsService.route(request, function (result, status) {
                                                  if (status == window.google.maps.DirectionsStatus.OK) {

                                                      var unsortedResult = {
                                                          order : kk, result : result
                                                      };
                                                      unsortedResults.push(unsortedResult);

                                                      directionsResultsReturned++;

                                                      if (directionsResultsReturned == batches.length)// we've received all the results. put to map
                                                      {
                                                          // sort the returned values into their correct order
                                                          unsortedResults.sort(function (a, b) {
                                                              return parseFloat(a.order) - parseFloat(b.order);
                                                          });
                                                          var count = 0;
                                                          for (var key in unsortedResults) {
                                                              if (unsortedResults[key].result != null) {
                                                                  if (unsortedResults.hasOwnProperty(key)) {
                                                                      if (count == 0)// first results. new up the combinedResults object
                                                                          combinedResults = unsortedResults[key].result;
                                                                      else {
                                                                          // only building up legs, overview_path, and bounds in my consolidated object. This is not a complete
                                                                          // directionResults object, but enough to draw a path on the map, which is all I need
                                                                          combinedResults.routes[0].legs = combinedResults.routes[0].legs.concat(unsortedResults[key].result.routes[0].legs);
                                                                          combinedResults.routes[0].overview_path = combinedResults.routes[0].overview_path.concat(unsortedResults[key].result.routes[0].overview_path);

                                                                          combinedResults.routes[0].bounds = combinedResults.routes[0].bounds.extend(unsortedResults[key].result.routes[0].bounds.getNorthEast());
                                                                          combinedResults.routes[0].bounds = combinedResults.routes[0].bounds.extend(unsortedResults[key].result.routes[0].bounds.getSouthWest());
                                                                      }
                                                                      count++;
                                                                  }
                                                              }
                                                          }
                                                          directionsDisplay.setDirections(combinedResults);
                                                          var legs = combinedResults.routes[0].legs;
                                                          // alert(legs.length);
                                                          for (var i = 0;i &lt; legs.length;i++) {
                                                              var markerletter = "A".charCodeAt(0);
                                                              markerletter += i;
                                                              markerletter = String.fromCharCode(markerletter);
                                                              createMarker(directionsDisplay.getMap(), legs[i].start_location, "marker" + i, "some text for marker " + i + legs[i].start_address + " dist :" +legs[i].distance.text, markerletter,i);
                                                          }
                                                          var i = legs.length;
                                                          var markerletter = "A".charCodeAt(0);
                                                          markerletter += i;
                                                          markerletter = String.fromCharCode(markerletter);
                                                              createMarker(directionsDisplay.getMap(), legs[legs.length - 1].end_location, "marker" + i, "some text for the " + i + "marker" + legs[legs.length - 1].end_address + " dist :" +legs[legs.length - 1].distance.text, markerletter,i);
                                                      }
                                                  }
                                              });
                                          })(k);
                                      }
                                  }
                              };
                      }
                      var infowindow = new google.maps.InfoWindow( {
                          size : new google.maps.Size(150, 50)
                      });

                      var icons = new Array();
                      icons["red"] = new google.maps.MarkerImage("mapIcons/marker_red.png", 
                      // This marker is 20 pixels wide by 34 pixels tall.
new google.maps.Size(20, 34), 
                      // The origin for this image is 0,0.
new google.maps.Point(0, 0), 
                      // The anchor for this image is at 9,34.
new google.maps.Point(9, 34));

                      function getMarkerImage(iconStr) {
                          if ((typeof (iconStr) == "undefined") || (iconStr == null)) {
                              iconStr = "red";
                          }
                          if (!icons[iconStr]) {
                              icons[iconStr] = new google.maps.MarkerImage("http://www.google.com/mapfiles/marker" + iconStr + ".png", 
                              // This marker is 20 pixels wide by 34 pixels tall.
new google.maps.Size(20, 34), 
                              // The origin for this image is 0,0.
new google.maps.Point(0, 0), 
                              // The anchor for this image is at 6,20.
new google.maps.Point(9, 34));
                          }
                          return icons[iconStr];

                      }
                      // Marker sizes are expressed as a Size of X,Y
                      // where the origin of the image (0,0) is located
                      // in the top left of the image.
                      // Origins, anchor positions and coordinates of the marker
                      // increase in the X direction to the right and in
                      // the Y direction down.
                      var iconImage = new google.maps.MarkerImage('mapIcons/marker_red.png', 
                      // This marker is 20 pixels wide by 34 pixels tall.
new google.maps.Size(20, 34), 
                      // The origin for this image is 0,0.
new google.maps.Point(0, 0), 
                      // The anchor for this image is at 9,34.
new google.maps.Point(9, 34));
                      var iconShadow = new google.maps.MarkerImage('http://www.google.com/mapfiles/shadow50.png', 
                      // The shadow image is larger in the horizontal dimension
                      // while the position and offset are the same as for the main image.
new google.maps.Size(37, 34), new google.maps.Point(0, 0), new google.maps.Point(9, 34));
                      // Shapes define the clickable region of the icon.
                      // The type defines an HTML  element 'poly' which
                      // traces out a polygon as a series of X,Y points. The final
                      // coordinate closes the poly by connecting to the first
                      // coordinate.
                      var iconShape = {
                          coord : [9, 0, 6, 1, 4, 2, 2, 4, 0, 8, 0, 12, 1, 14, 2, 16, 5, 19, 7, 23, 8, 26, 9, 30, 9, 34, 11, 34, 11, 30, 12, 26, 13, 24, 14, 21, 16, 18, 18, 16, 20, 12, 20, 8, 18, 4, 16, 2, 15, 1, 13, 0], type : 'poly'
                      };

                      function createMarker(map, latlng, label, html, color,i) {
                          // alert("createMarker("+latlng+","+label+","+html+","+color+")");

                         var iconStation = 'resources/ico/number_' + i + '.png';
                          var contentString = '' + label + ' ' + html;
                          var marker = new google.maps.Marker( {
                              position : latlng, map : map, shadow : iconShadow, icon : iconStation, shape : iconShape, title : label
                          });
                          marker.myname = label;

                          google.maps.event.addListener(marker, 'click', function () {
                              infowindow.setContent(contentString);
                              infowindow.open(map, marker);
                          });
                          return marker;
                      }

                      google.maps.event.addDomListener(window, 'load', initialize(listLine, listStation, centre));
                    </af:resource>
                </af:group>
            </af:panelBox>
        </f:facet>
    </af:panelSplitter>
    <!--oracle-jdev-comment:preferred-managed-bean-name:JSClassBean-->
</ui:composition>
