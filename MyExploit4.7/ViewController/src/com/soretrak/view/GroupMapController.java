package com.soretrak.view;

import javax.faces.context.FacesContext;

import oracle.adf.model.BindingContext;
import oracle.adf.model.RegionBinding;
import oracle.adf.model.RegionContext;
import oracle.adf.model.RegionController;
import oracle.adf.model.binding.DCBindingContainer;

import oracle.binding.AttributeBinding;
import oracle.binding.BindingContainer;
import oracle.binding.OperationBinding;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;

import org.apache.myfaces.trinidad.render.ExtendedRenderKitService;
import org.apache.myfaces.trinidad.util.Service;

public class GroupMapController implements RegionController {
    public GroupMapController() {
        super();
    }

    @Override
    public boolean refreshRegion(RegionContext regionContext) {
        int refreshFlag = regionContext.getRefreshFlag();
        //.
        if (refreshFlag == RegionBinding.PREPARE_MODEL) {
            this.initializeMethod();
        }
        //regionContext.getRegionBinding().refresh(refreshFlag);
        return false;
    }

    @Override
    public boolean validateRegion(RegionContext regionContext) {
        // TODO Implement this method
        return false;
    }

    @Override
    public boolean isRegionViewable(RegionContext regionContext) {
        // TODO Implement this method
        return false;
    }

    @Override
    public String getName() {
        // TODO Implement this method
        return null;
    }

    public void initializeMethod() {
        BindingContainer bindings = getBindings();
        AttributeBinding nbre = (AttributeBinding) bindings.get("nbretrips");

        if (Integer.parseInt(nbre.getInputValue().toString()) != 0) {

            doListTimeGrp();
            RowSetIterator iterator =
                ((DCBindingContainer) BindingContext.getCurrent().getCurrentBindingsEntry()).findIteratorBinding("ListStationTimeView1Iterator").getViewObject().createRowSetIterator(null);
            Row row = null;
            iterator.reset();
            String jsArrayStation = "[";


            while (iterator.hasNext()) {
                row = iterator.next();
                if ((row.getAttribute("StopLat") != null) && (row.getAttribute("StopLon") != null))
                    jsArrayStation +=
                        "{\"t\": \"" + row.getAttribute("Delstaa") + "\"," + "\"h\": \"" + row.getAttribute("Times") +
                        "\"," + "\"l\": " + row.getAttribute("StopLat") + "," + "\"g\": " +
                        row.getAttribute("StopLon") + "},";

            }
            iterator.closeRowSetIterator();
            jsArrayStation += "]";


            jsArrayStation = jsArrayStation.replace("},]", "}]");
           // System.out.println("displayData : " + jsArrayStation);
            // call javascript function with param


            ///execute a list of distinct lines
            doListLineGrp();
            String centre = "";
            RowSetIterator iteratorLine =
                ((DCBindingContainer) BindingContext.getCurrent().getCurrentBindingsEntry()).findIteratorBinding("ListLinesGrpView1Iterator").getViewObject().createRowSetIterator(null);
            Row rowLine = null;
            iteratorLine.reset();
            String jsArrayLine = "[";


            while (iteratorLine.hasNext()) {
                rowLine = iteratorLine.next();

                jsArrayLine += "{\"ligne\": \"" + rowLine.getAttribute("Denumli") + "\"},";

            }
            centre = rowLine.getAttribute("Deccent").toString();

            iteratorLine.closeRowSetIterator();
            jsArrayLine += "]";


            jsArrayLine = jsArrayLine.replace("},]", "}]");
           // System.out.println("displayData : " + jsArrayLine);


            // call javascript function with param


            //String language = JsfUtils.resolveExpression("#{pageFlowScope.language}").toString();
            FacesContext fctx = FacesContext.getCurrentInstance();
            ExtendedRenderKitService erks = Service.getRenderKitService(fctx, ExtendedRenderKitService.class);
            //erks.addScript(fctx, "initialize('"+ "fgf" +"');");
            //System.out.print("hello :" + ligne);

           
            erks.addScript(fctx, "initialize('" + jsArrayLine + "','" + jsArrayStation+ "','" + centre + "')");
            
        }

    }


    public BindingContainer getBindings() {
        return BindingContext.getCurrent().getCurrentBindingsEntry();
    }

    public String doListLineGrp() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("ListLineGrp");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

    public String doListTimeGrp() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("ListStationTimeGrp");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

}
