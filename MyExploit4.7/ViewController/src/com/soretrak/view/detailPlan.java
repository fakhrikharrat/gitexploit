package com.soretrak.view;

import javax.faces.component.html.HtmlOutputLabel;

import oracle.adf.model.BindingContext;
import oracle.adf.model.RegionBinding;
import oracle.adf.model.RegionContext;
import oracle.adf.model.RegionController;
import oracle.adf.view.rich.component.rich.data.RichColumn;

import oracle.adf.view.rich.component.rich.input.RichInputListOfValues;
import oracle.adf.view.rich.component.rich.input.RichInputText;

import oracle.adf.view.rich.component.rich.input.RichSelectOneRadio;
import oracle.adf.view.rich.component.rich.layout.RichGridRow;
import oracle.adf.view.rich.component.rich.layout.RichPanelLabelAndMessage;
import oracle.adf.view.rich.component.rich.nav.RichButton;

import oracle.adf.view.rich.context.AdfFacesContext;

import oracle.binding.BindingContainer;
import oracle.binding.OperationBinding;

public class detailPlan  {
    private RichColumn idlocation;
    private RichColumn idvoyage;
    private RichColumn idHoraire;

    private RichButton bimportvoy;
    private RichPanelLabelAndMessage lbgroup;
    private RichPanelLabelAndMessage idgroup;
    private RichColumn idAffect;

    String isthere;
    private RichColumn idAffecExec;
    private RichInputListOfValues chauplan;
    private RichPanelLabelAndMessage lbchaufplan;
    private RichInputListOfValues chauexec;
    private RichPanelLabelAndMessage lbchaufexec;
    private RichInputListOfValues recplan;
    private RichPanelLabelAndMessage lbrecplan;
    private RichInputListOfValues recexec;
    private RichInputText lbchaufp;
    private RichPanelLabelAndMessage lbrecexec;
    private RichInputListOfValues vehicplan;
    private RichInputListOfValues vehicexec;
   
    private RichButton baffectgrp;
    private RichSelectOneRadio idetat;
    private RichButton bimportloc;
    private RichButton bsave;
    private RichColumn idMission;


    public detailPlan() {

    }

    public void setIdlocation(RichColumn idlocation) {
        this.idlocation = idlocation;
    }

    public RichColumn getIdlocation() {
        return idlocation;
    }

    public void setIdvoyage(RichColumn idvoyage) {
        this.idvoyage = idvoyage;
    }

    public RichColumn getIdvoyage() {
        return idvoyage;
    }

    public BindingContainer getBindings() {
        return BindingContext.getCurrent().getCurrentBindingsEntry();
    }

    public String doRoulement() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("ExecuteWithParams");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        
        String etat = (String) AdfFacesContext.getCurrentInstance().getPageFlowScope().get("inputEtat");
        //setEnableDisableCol(false, etat);
        setEnableDisableColV2( etat, "R");
        
        bsave.setVisible(true);
        return null;
    }

    public String doLocation() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("ExecuteWithParams1");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        String etat = (String) AdfFacesContext.getCurrentInstance().getPageFlowScope().get("inputEtat");
        //setEnableDisableCol(true,etat);
        setEnableDisableColV2( etat, "L");
        
        baffectgrp.setVisible(false);
        bsave.setVisible(true);
        return null;
    }


    public String doExecutePlan() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("Execute");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

    public String doCreatePlan() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("changeDynamicVoQuery");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }

        doExecutePlan();
        return null;
    }

    public void setIdHoraire(RichColumn idHoraire) {
        this.idHoraire = idHoraire;
    }

    public RichColumn getIdHoraire() {
        return idHoraire;
    }


    public String doSave() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("Commit");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

    public String doCancel() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("Rollback");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

   
    public String doSubmitGroupRecord() {
        
        doAffecDataPlanGroup();
        
        return null;
    }

    public String doAffecDataPlanGroup() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("setDataPlanGroup");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        doSave();
        doExecutePlan();
        return null;
    }

    public void setBimportvoy(RichButton bimportvoy) {
        this.bimportvoy = bimportvoy;
    }

    public RichButton getBimportvoy() {
        return bimportvoy;
    }


    public void setLbgroup(RichPanelLabelAndMessage lbgroup) {
        this.lbgroup = lbgroup;
    }

    public RichPanelLabelAndMessage getLbgroup() {
        return lbgroup;
    }

    public void setIdgroup(RichPanelLabelAndMessage idgroup) {
        this.idgroup = idgroup;
    }

    public RichPanelLabelAndMessage getIdgroup() {
        return idgroup;
    }

    public void setIdAffect(RichColumn idAffect) {
        this.idAffect = idAffect;
    }

    public RichColumn getIdAffect() {
        return idAffect;
    }

    public void setIsthere(String isthere) {
        this.isthere = isthere;
    }

    public String getIsthere() {

        String etat = (String) AdfFacesContext.getCurrentInstance().getPageFlowScope().get("inputEtat");
    
        
        //setEnableDisableColV2( etat, "R");
        doRoulement();
        return isthere;
    }

    public void setEnableDisableColV2( String vetat, String typpl) {
        boolean Roul;
        boolean Loc;
        boolean Miss;
        
        if ( typpl.compareTo("R")==0){
            Roul=true; 
            Loc=false; 
            Miss=false; 
        }
             
        else if (typpl.compareTo("L")==0){
            Roul=false; 
            Loc=true; 
            Miss=false; 
        }
        else{
            Roul=false; 
            Loc=false; 
            Miss=true; 
        }
            
        
        switch (vetat) {

        case "P":
            idMission.setRendered(Miss);
            idlocation.setRendered(Loc);
            baffectgrp.setVisible(Roul);
            bsave.setVisible(Roul);
            idvoyage.setRendered(Roul);
            idHoraire.setRendered(Roul);
            lbgroup.setVisible(Roul);
            idgroup.setVisible(Roul);
            bimportvoy.setVisible(Roul);
            bimportloc.setVisible(Loc);
            idAffect.setRendered(true);
            idAffecExec.setRendered(false);
            
            
            lbchaufplan.setRendered(true);
            lbrecplan.setRendered(true);
            lbchaufexec.setRendered(false);
            lbrecexec.setRendered(false);
            
            
            idetat.setVisible(false);    
            break;
        case "E":
            idMission.setRendered(Miss);
            idlocation.setRendered(Loc);
            baffectgrp.setVisible(Roul);
            bsave.setVisible(Roul);
            idvoyage.setRendered(Roul);
            idHoraire.setRendered(Roul);
            lbgroup.setVisible(Roul);
            idgroup.setVisible(Roul);
           
            bimportvoy.setVisible(false);
            bimportloc.setVisible(false);
            idAffect.setRendered(false);
            idAffecExec.setRendered(true);
            
            
            lbchaufplan.setRendered(false);
            lbchaufexec.setRendered(true);
            lbrecplan.setRendered(false);
            lbrecexec.setRendered(true);
            
            
            idetat.setVisible(true);    
            break;
        case "H":
            idMission.setRendered(Miss);
            idlocation.setRendered(Loc);
            baffectgrp.setVisible(Roul);
            
            idvoyage.setRendered(Roul);
            idHoraire.setRendered(Roul);
            lbgroup.setVisible(Roul);
            idgroup.setVisible(Roul);
            
            bsave.setVisible(false);
            bimportvoy.setVisible(false);
            bimportloc.setVisible(false);
            idAffect.setRendered(false);
            idAffecExec.setRendered(true);
            
            
            lbchaufplan.setRendered(false);
            lbchaufexec.setRendered(true);
            lbrecplan.setRendered(false);
            lbrecexec.setRendered(true);
            
         
            idetat.setVisible(false);    
            break;
        case "C":
            idMission.setRendered(Miss);
            idlocation.setRendered(Loc);
            baffectgrp.setVisible(Roul);
            idvoyage.setRendered(Roul);
            idHoraire.setRendered(Roul);
            lbgroup.setVisible(Roul);
            idgroup.setVisible(Roul);
            
            bsave.setVisible(false);
            bimportvoy.setVisible(false);
            bimportloc.setVisible(false);
            idAffect.setRendered(false);
            idAffecExec.setRendered(true);
            
            
            lbchaufplan.setRendered(false);
            lbchaufexec.setRendered(true);
            lbrecplan.setRendered(false);
            lbrecexec.setRendered(true);
            
            
            
            //baffectgrp.setRendered(false);
            idetat.setVisible(false);    
            break;


        }


    }

    public void setEnableDisableCol(boolean value, String vetat) {
        
        switch (vetat) {

        case "P":
            idlocation.setRendered(value);
            baffectgrp.setVisible(!value);
            idvoyage.setRendered(!value);
            idHoraire.setRendered(!value);
            lbgroup.setVisible(!value);
            idgroup.setVisible(!value);
            bimportvoy.setVisible(!value);
            bimportloc.setVisible(value);
            idAffect.setRendered(true);
            idAffecExec.setRendered(false);
            
            
            lbchaufplan.setRendered(true);
            lbrecplan.setRendered(true);
            lbchaufexec.setRendered(false);
            lbrecexec.setRendered(false);
            /*chauplan.setRendered(true);
            
            chauexec.setRendered(false);
            
            recplan.setRendered(true);
            
            recexec.setRendered(false);
            
            
            vehicplan.setRendered(true);
            vehicexec.setRendered(false);
            
            baffect.setRendered(true);*/
            
            idetat.setVisible(false);    
            break;
        case "E":
            idlocation.setRendered(value);
            baffectgrp.setVisible(!value);
            idvoyage.setRendered(!value);
            idHoraire.setRendered(!value);
            lbgroup.setVisible(!value);
            idgroup.setVisible(!value);
            bimportvoy.setVisible(false);
            bimportloc.setVisible(false);
            idAffect.setRendered(false);
            idAffecExec.setRendered(true);
            
            
            lbchaufplan.setRendered(false);
            lbchaufexec.setRendered(true);
            lbrecplan.setRendered(false);
            lbrecexec.setRendered(true);
            
            /*chauplan.setRendered(false);
            
            chauexec.setRendered(true);
            
            recplan.setRendered(false);
            
            recexec.setRendered(true);
            
            
            
            vehicplan.setRendered(false);
            vehicexec.setRendered(true);
            */
            
            //baffectgrp.setRendered(false);
            idetat.setVisible(true);    
            break;
        case "H":
            idlocation.setRendered(value);
            baffectgrp.setVisible(!value);
            idvoyage.setRendered(!value);
            idHoraire.setRendered(!value);
            lbgroup.setVisible(!value);
            idgroup.setVisible(!value);
            bimportvoy.setVisible(false);
            bimportloc.setVisible(false);
            idAffect.setRendered(false);
            idAffecExec.setRendered(true);
            
            
            lbchaufplan.setRendered(false);
            lbchaufexec.setRendered(true);
            lbrecplan.setRendered(false);
            lbrecexec.setRendered(true);
            
          /*  chauplan.setRendered(false);
            
            chauexec.setReadOnly(true);
            
            recplan.setRendered(false);
            
            recexec.setReadOnly(true);
            
            
            vehicplan.setRendered(false);
            vehicexec.setReadOnly(true);
            */
            
            //baffectgrp.setRendered(false);
            idetat.setVisible(false);    
            break;
        case "C":
            idlocation.setRendered(value);
            baffectgrp.setVisible(!value);
            idvoyage.setRendered(!value);
            idHoraire.setRendered(!value);
            lbgroup.setVisible(!value);
            idgroup.setVisible(!value);
            bimportvoy.setVisible(false);
            bimportloc.setVisible(false);
            idAffect.setRendered(false);
            idAffecExec.setRendered(true);
            
            
            lbchaufplan.setRendered(false);
            lbchaufexec.setRendered(true);
            lbrecplan.setRendered(false);
            lbrecexec.setRendered(true);
            
            /*chauplan.setRendered(false);
            
            chauexec.setReadOnly(true);
            
            recplan.setRendered(false);
            
            recexec.setReadOnly(true);
            
            
            vehicplan.setRendered(false);
            vehicexec.setReadOnly(true);
            */
            
            //baffectgrp.setRendered(false);
            idetat.setVisible(false);    
            break;


        }


    }

    public void setIdAffecExec(RichColumn idAffecExec) {
        this.idAffecExec = idAffecExec;
    }

    public RichColumn getIdAffecExec() {
        return idAffecExec;
    }

    public void setChauplan(RichInputListOfValues chauplan) {
        this.chauplan = chauplan;
    }

    public RichInputListOfValues getChauplan() {
        return chauplan;
    }

    public void setLbchaufplan(RichPanelLabelAndMessage lbchaufplan) {
        this.lbchaufplan = lbchaufplan;
    }

    public RichPanelLabelAndMessage getLbchaufplan() {
        return lbchaufplan;
    }

    public void setChauexec(RichInputListOfValues chauexec) {
        this.chauexec = chauexec;
    }

    public RichInputListOfValues getChauexec() {
        return chauexec;
    }

    public void setLbchaufexec(RichPanelLabelAndMessage lbchaufexec) {
        this.lbchaufexec = lbchaufexec;
    }

    public RichPanelLabelAndMessage getLbchaufexec() {
        return lbchaufexec;
    }

    public void setRecplan(RichInputListOfValues recplan) {
        this.recplan = recplan;
    }

    public RichInputListOfValues getRecplan() {
        return recplan;
    }

    public void setLbrecplan(RichPanelLabelAndMessage lbrecplan) {
        this.lbrecplan = lbrecplan;
    }

    public RichPanelLabelAndMessage getLbrecplan() {
        return lbrecplan;
    }

    public void setRecexec(RichInputListOfValues recexec) {
        this.recexec = recexec;
    }

    public RichInputListOfValues getRecexec() {
        return recexec;
    }

    public void setLbchaufp(RichInputText lbchaufp) {
        this.lbchaufp = lbchaufp;
    }

    public RichInputText getLbchaufp() {
        return lbchaufp;
    }

    public void setLbrecexec(RichPanelLabelAndMessage lbrecexec) {
        this.lbrecexec = lbrecexec;
    }

    public RichPanelLabelAndMessage getLbrecexec() {
        return lbrecexec;
    }

    public void setVehicplan(RichInputListOfValues vehicplan) {
        this.vehicplan = vehicplan;
    }

    public RichInputListOfValues getVehicplan() {
        return vehicplan;
    }

    public void setVehicexec(RichInputListOfValues vehicexec) {
        this.vehicexec = vehicexec;
    }

    public RichInputListOfValues getVehicexec() {
        return vehicexec;
    }

    

    public void setBaffectgrp(RichButton baffectgrp) {
        this.baffectgrp = baffectgrp;
    }

    public RichButton getBaffectgrp() {
        return baffectgrp;
    }

    public void setIdetat(RichSelectOneRadio idetat) {
        this.idetat = idetat;
    }

    public RichSelectOneRadio getIdetat() {
        return idetat;
    }

    public void setBimportloc(RichButton bimportloc) {
        this.bimportloc = bimportloc;
    }

    public RichButton getBimportloc() {
        return bimportloc;
    }

    public String doCreateLoc() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("getDynamicLocationQuery");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        
        doExecutePlan();
        return null;
    }

    public void setBsave(RichButton bsave) {
        this.bsave = bsave;
    }

    public RichButton getBsave() {
        return bsave;
    }

    public String doMissions() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("ExecuteWithParams2");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        
        String etat = (String) AdfFacesContext.getCurrentInstance().getPageFlowScope().get("inputEtat");
        //setEnableDisableCol(true,etat);
        setEnableDisableColV2( etat, "M");
        
        baffectgrp.setVisible(false);
        bsave.setVisible(true);
        
        return null;
    }

    public void setIdMission(RichColumn idMission) {
        this.idMission = idMission;
    }

    public RichColumn getIdMission() {
        return idMission;
    }
}
