package com.soretrak.view.bean;

import com.soretrak.view.ADFUtil;

import java.util.List;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;

import oracle.adf.model.BindingContext;

import oracle.adf.model.binding.DCIteratorBinding;
import oracle.adf.view.rich.component.rich.data.RichColumn;
import oracle.adf.view.rich.component.rich.data.RichTable;
import oracle.adf.view.rich.component.rich.output.RichOutputText;
import oracle.adf.view.rich.context.AdfFacesContext;
import oracle.adf.view.rich.event.DialogEvent;

import oracle.adf.view.rich.event.QueryEvent;
import oracle.adf.view.rich.model.AttributeCriterion;
import oracle.adf.view.rich.model.ConjunctionCriterion;
import oracle.adf.view.rich.model.Criterion;
import oracle.adf.view.rich.model.FilterableQueryDescriptor;

import oracle.binding.AttributeBinding;
import oracle.binding.BindingContainer;
import oracle.binding.OperationBinding;

import oracle.jbo.Row;

import oracle.jbo.uicli.binding.JUCtrlHierBinding;

import org.apache.myfaces.trinidad.event.SelectionEvent;
import org.apache.myfaces.trinidad.model.CollectionModel;

public class GroupExp {
    private RichTable searchTabBind;
    private RichColumn colListVoy;
    private RichColumn colAnn;
   
   
    String newTripsId;
    String tripid;
    
    public GroupExp() {
    }


    String isthere;

    public void setIsthere(String isthere) {
        this.isthere = isthere;
    }

    public String getIsthere() {
        BindingContainer bindings = getBindings();
        AttributeBinding etat = (AttributeBinding) bindings.get("Etat");
        //doListVoyages();

        if (etat.getInputValue().toString().compareTo("0") == 0) {
            colAnn.setRendered(true);
            colListVoy.setRendered(true);
        } else {
            colAnn.setRendered(false);
            colListVoy.setRendered(false);
        }
        return isthere;
    }

    public void groupEmpTable(SelectionEvent selectionEvent) {
        ADFUtil.invokeEL("#{bindings.GroupExpView1.collectionModel.makeCurrent}", new Class[] { SelectionEvent.class },
                         new Object[] { selectionEvent });
        // get the selected row , by this you can get any attribute of that row
        Row selectedRow = (Row) ADFUtil.evaluateEL("#{bindings.GroupExpView1Iterator.currentRow}");

        System.out.println("debut :" + selectedRow.getAttribute("TimeStart") + " fin :" +
                           selectedRow.getAttribute("TimeEnd"));

        doListVoyages();
    }

    public BindingContainer getBindings() {
        return BindingContext.getCurrent().getCurrentBindingsEntry();
    }

    public String doListVoyages() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("setBindVarsPropTrips");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }


        return null;
    }

    public void onDialogAffectList(DialogEvent dialogEvent) {
        BindingContainer bindings = getBindings();
        AttributeBinding numgroup = (AttributeBinding) bindings.get("Num");
        AttributeBinding nummaster = (AttributeBinding) bindings.get("Num1");
        AttributeBinding tripid1 = (AttributeBinding) bindings.get("TripId");

        AttributeBinding haveret = (AttributeBinding) bindings.get("Haveret");
        AttributeBinding tripNid = (AttributeBinding) bindings.get("TripNid");

        //String groupproposed= (String) AdfFacesContext.getCurrentInstance().getPageFlowScope().get("inputGroupe");
        //String groupgroup = (String) AdfFacesContext.getCurrentInstance().getPageFlowScope().get("inputNum");

        
        
        DialogEvent.Outcome outcome = dialogEvent.getOutcome();
        if (outcome == DialogEvent.Outcome.ok) {
            System.out.println("groupe : " + numgroup.getInputValue());


            if (numgroup.getInputValue() != null) {
                //duplication du voyage pour le group en question
                newTripsId =doAddNewTripsGroup();
                System.out.println("new id :"+newTripsId + "  group : " + numgroup.getInputValue().toString());
                // creation des station par voyage
                doCreateStopTime();
                // mise a jour du temp d'arrivé du voyage
                doUpdateReturnTime();
                //doExecuteGroup();
                // refresh the list of proposed trips
                
                if (haveret.getInputValue().toString().compareTo("O") == 0) {

                    tripid =doCreateReturnTrips();
                    System.out.println("return trip id :"+tripid);
                    //update tripNid of specific tripId 
                    
                    
                    doUpdateTripNid();
                    
                    
                    

                }


            } else {

                System.out.println(" group :" + nummaster.getInputValue() + " trip id :" + tripid1);
                //update group id in trip
                doUpdateGroupInTrip();

                if (haveret.getInputValue().toString().compareTo("O") == 0) {
                    doUpdateGroupInTripLink();
                }
            }


            doExecuteGroup();
            clearTable(searchTabBind);


        }
    }

    public void onDialogAnnList(DialogEvent dialogEvent) {
        BindingContainer bindings = getBindings();
        
        AttributeBinding haveret = (AttributeBinding) bindings.get("Haveret");
        AttributeBinding nbreaffect = (AttributeBinding) bindings.get("nbreaffect");
        
        int val = Integer.parseInt(nbreaffect.getInputValue().toString());
        if (val == 0) {

            DialogEvent.Outcome outcome = dialogEvent.getOutcome();
            if (outcome == DialogEvent.Outcome.ok) {
                if (haveret.getInputValue().toString().compareTo("O") == 0) {
                    duUpdateNullGrpLink();
                }
                duUpdateNullGrp();
               
                doExecuteGroup();
            }
        } else
            messageFaces("Ce voyage existe dans le planing pour le groupe en question. vous ne pouvez pas l'annulé ");
    }

    public String doAddNewTripsGroup() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("addTrips");
        Object result = operationBinding.execute();
        Object returnValue=operationBinding.getResult();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return returnValue.toString();
    }

    public String doExecuteTrips() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("Execute");
        Object result = operationBinding.execute();
        
        
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

    public String doCreateStopTime() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("createStopTimes");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

    public String doUpdateReturnTime() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("updateTimeReturn");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

    public void setSearchTabBind(RichTable searchTabBind) {
        this.searchTabBind = searchTabBind;
    }

    public RichTable getSearchTabBind() {
        return searchTabBind;
    }

    public void resetTableFilterAction() {

        FilterableQueryDescriptor queryDescriptor = (FilterableQueryDescriptor) getSearchTabBind().getFilterModel();
        if (queryDescriptor != null && queryDescriptor.getFilterConjunctionCriterion() != null) {
            ConjunctionCriterion cc = queryDescriptor.getFilterConjunctionCriterion();
            List<Criterion> lc = cc.getCriterionList();
            for (Criterion c : lc) {
                if (c instanceof AttributeCriterion) {
                    AttributeCriterion ac = (AttributeCriterion) c;
                    ac.setValue(null);
                }
            }
            getSearchTabBind().queueEvent(new QueryEvent(getSearchTabBind(), queryDescriptor));
        }
    }

    public String doRefresh() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("setBindVarsPropTrips");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

    public String doExecute() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("Execute");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }


    public String doExecuteGroup() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("Execute1");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

    public static void clearTable(RichTable _table) {
        //the Collection Model is the object that provides the structured data
        //for the table to render
        CollectionModel _tableModel = (CollectionModel) _table.getValue();
        //the ADF object that implements the CollectionModel is JUCtrlHierBinding. It
        //is wrapped by the CollectionModel API
        JUCtrlHierBinding _adfTableBinding = (JUCtrlHierBinding) _tableModel.getWrappedData();
        //Acess the ADF iterator binding that is used with ADF table binding
        DCIteratorBinding _tableIteratorBinding = _adfTableBinding.getDCIteratorBinding();
        _tableIteratorBinding.getViewObject().executeEmptyRowSet();
        AdfFacesContext.getCurrentInstance().addPartialTarget(_table);
    }


    @SuppressWarnings("unchecked")
    public String doUpdateGroupInTrip() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("updateGroupInTrips");
        //AttributeBinding grp = (AttributeBinding) bindings.get("Num1");
        //System.out.println(" groupe last:" + grp.getInputValue());
        //operationBinding.getParamsMap().put("grp", grp.getInputValue());
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }


    @SuppressWarnings("unchecked")
    public String doUpdateGroupInTripLink() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("updateGroupInTripsLink");
        //AttributeBinding grp = (AttributeBinding) bindings.get("Num1");
        //System.out.println(" groupe last:" + grp.getInputValue());
        //operationBinding.getParamsMap().put("grp", grp.getInputValue());

        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }


    public String duUpdateNullGrp() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("updateGroupInTripsNull");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

    @SuppressWarnings("unchecked")
    public String duUpdateNullGrpLink() {
        BindingContainer bindings = getBindings();
        AttributeBinding tripNid = (AttributeBinding) bindings.get("TripNid");
       
        OperationBinding operationBinding = bindings.getOperationBinding("updateGroupInTripsNullLink");
        
        operationBinding.getParamsMap().put("id", tripNid.getInputValue());
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

    public void setColListVoy(RichColumn colListVoy) {
        this.colListVoy = colListVoy;
    }

    public RichColumn getColListVoy() {
        return colListVoy;
    }

    public void setColAnn(RichColumn colAnn) {
        this.colAnn = colAnn;
    }

    public RichColumn getColAnn() {
        return colAnn;
    }

    private void messageFaces(String mess) {
        FacesMessage fm = new FacesMessage(mess);
        fm.setSeverity(FacesMessage.SEVERITY_ERROR); //instead of SEVERITY_ERROR use SEVERITY_WARN
        FacesContext context = FacesContext.getCurrentInstance();
        context.addMessage(null, fm);

    }


    @SuppressWarnings("unchecked")
    public String doCreateReturnTrips() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("createReturnTripsAM");
        
        operationBinding.getParamsMap().put("oldtrip", Integer.valueOf(newTripsId) );
        Object result = operationBinding.execute();
       
       Object returnValue=operationBinding.getResult();
       if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return returnValue.toString();
    }

    @SuppressWarnings("unchecked")
    public String doUpdateTripNid() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("updateTripNid1");
        
        System.out.println(" id :" + Integer.valueOf(newTripsId) + " nid " + Integer.valueOf(tripid));
        operationBinding.getParamsMap().put("id", Integer.valueOf(newTripsId));
        operationBinding.getParamsMap().put("nid", Integer.valueOf(tripid));
        
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

   
}
