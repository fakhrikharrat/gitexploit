package com.soretrak.view.bean;

import oracle.adf.model.BindingContext;

import oracle.adf.view.rich.component.rich.input.RichInputDate;
import oracle.adf.view.rich.component.rich.input.RichInputListOfValues;
import oracle.adf.view.rich.component.rich.input.RichSelectOneChoice;
import oracle.adf.view.rich.context.AdfFacesContext;

import oracle.binding.BindingContainer;
import oracle.binding.OperationBinding;

public class addTrips {

    String isthere;

    private RichInputDate tt;
    private RichInputListOfValues voyage;
    private RichSelectOneChoice AR;
    String tripid;
    
    public void setIsthere(String isthere) {
        this.isthere = isthere;
    }

    public String getIsthere() {

        String etat = (String) AdfFacesContext.getCurrentInstance().getPageFlowScope().get("inputUI");

        if (etat.compareTo("I") == 0) {
            System.out.println("etat :" + etat);
            voyage.setDisabled(true);
            tt.setDisabled(false);
            AR.setDisabled(false);
        } else {
            System.out.println(" else etat :" + etat);
            voyage.setDisabled(false);
            tt.setDisabled(true);
            AR.setDisabled(true);
        }

        return isthere;
    }

    public addTrips() {
    }

    public BindingContainer getBindings() {
        return BindingContext.getCurrent().getCurrentBindingsEntry();
    }


    public String doSaveUpdate() {

        
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("Commit");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        //creation ou recreation des stop time du voyage , il controle si le timedepart a etait modifier ou pas
        doCreateStopTime();

        String etat = (String) AdfFacesContext.getCurrentInstance().getPageFlowScope().get("inputUI");

        if ((etat.compareTo("I") == 0) && (AR.getValue().toString().compareTo("O") == 0) && (tt.getValue() != null)) {
            
            tripid =doCreateReturnTrips();
            
            //update tripNid of specific tripId 
            doUpdateTripNid();
            
            doCreateStopTime();
            doSave();
        }

        return "back";
    }


    public String doCreateStopTime() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("createStopTimes");
        Object result = operationBinding.execute();
        
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }


    public void setTt(RichInputDate tt) {
        this.tt = tt;
    }

    public RichInputDate getTt() {
        return tt;
    }

    public void setVoyage(RichInputListOfValues voyage) {
        this.voyage = voyage;
    }

    public RichInputListOfValues getVoyage() {
        return voyage;
    }

    public String doCreateReturnTrips() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("createReturnTrips");
        Object result = operationBinding.execute();
        
        Object returnValue=operationBinding.getResult();
        
        
       if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return returnValue.toString();
    }

    public void setAR(RichSelectOneChoice AR) {
        this.AR = AR;
    }

    public RichSelectOneChoice getAR() {
        return AR;
    }
    
    public String doSave() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("Commit");
        Object result = operationBinding.execute();
        
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

    @SuppressWarnings("unchecked")
    public String doUpdateTripNid() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("updateTripNid");
        //tripid param is already passed in the binding parameter
       System.out.println("fakhri nid :" + Integer.valueOf(tripid)); 
        operationBinding.getParamsMap().put("nid", Integer.valueOf(tripid));

        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

   
}
