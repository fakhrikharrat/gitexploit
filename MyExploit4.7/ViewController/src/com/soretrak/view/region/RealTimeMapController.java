package com.soretrak.view.region;

import javax.faces.context.FacesContext;

import oracle.adf.model.BindingContext;
import oracle.adf.model.RegionBinding;
import oracle.adf.model.RegionContext;
import oracle.adf.model.RegionController;
import oracle.adf.model.binding.DCBindingContainer;

import oracle.adf.view.rich.component.rich.input.RichInputText;

import oracle.adf.view.rich.event.DialogEvent;

import oracle.binding.AttributeBinding;
import oracle.binding.BindingContainer;

import oracle.binding.OperationBinding;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;

import oracle.jbo.domain.Timestamp;

import org.apache.myfaces.trinidad.render.ExtendedRenderKitService;
import org.apache.myfaces.trinidad.util.Service;

public class RealTimeMapController implements RegionController {

    String centre;

    public RealTimeMapController() {
        super();
    }

    @Override
    public boolean refreshRegion(RegionContext regionContext) {
        int refreshFlag = regionContext.getRefreshFlag();
        //.
        if (refreshFlag == RegionBinding.PREPARE_MODEL) {
            this.initializeMethod();
        }
        // Propagate the refresh to the inner binding container
        regionContext.getRegionBinding().refresh(refreshFlag);
        return false;
    }

    @Override
    public boolean validateRegion(RegionContext regionContext) {
        regionContext.getRegionBinding().validate();
        return false;
    }

    @Override
    public boolean isRegionViewable(RegionContext regionContext) {
        // TODO Implement this method
        return false;
    }

    @Override
    public String getName() {
        // TODO Implement this method
        return null;
    }

    public BindingContainer getBindings() {
        return BindingContext.getCurrent().getCurrentBindingsEntry();
    }


    public void initializeMethod() {
        String station_file = null;
        String stopsTimes = null;
        String lines = null;

        BindingContainer bindings = getBindings();
        AttributeBinding idgps = (AttributeBinding) bindings.get("idgps");
        AttributeBinding Dedated = (AttributeBinding) bindings.get("Dedated");
        AttributeBinding Timestart = (AttributeBinding) bindings.get("Timestart");
        AttributeBinding Timeend = (AttributeBinding) bindings.get("Timeend");
        AttributeBinding planning = (AttributeBinding) bindings.get("Planning");
        AttributeBinding station = (AttributeBinding) bindings.get("Stations");
        AttributeBinding Denumli = (AttributeBinding) bindings.get("Denumli");


        //String tt="455606";
        // String trajet = "http://www.i-fleet.biz/ka2/org.gc.Main/historique?q=2&matricule=455605&depart=2017-01-24%2000:00:00.0&arrivee=2017-01-24%2023:59:00.0&login=soretrak&pass=soretrak2012";

        String trajet =
            "http://www.i-fleet.biz/ka2/org.gc.Main/historique?q=2&matricule=" + idgps + "&depart=" + Dedated + "%20" +
            Timestart + ".0&arrivee=" + Dedated + "%20" + Timeend + ".0&login=soretrak&pass=soretrak2012";
        // call javascript function with param
        //System.out.println(" ligne selected :" + Denumli.toString());

        if (station.toString().compareTo("1") == 0)
            station_file = "https://dl.dropboxusercontent.com/u/50101013/stations.json";


        if (Denumli.toString().length() != 0) {
            lines = getTripPlan();
            stopsTimes = getStopsTimesTrip();
        }
        //String language = JsfUtils.resolveExpression("#{pageFlowScope.language}").toString();
        FacesContext fctx = FacesContext.getCurrentInstance();
        ExtendedRenderKitService erks = Service.getRenderKitService(fctx, ExtendedRenderKitService.class);


        //erks.addScript(fctx, "initialize('" + trajet + "','" + real + "','" + idgps +"')");
        erks.addScript(fctx, "initialize('" + trajet + "','" + station_file+ "','" + lines+ "','" + stopsTimes+ "','" + centre + "')");
        // erks.addScript(fctx, "initialize('" + trajet +  "')");
        //erks.addScript(fctx, "initialize()");

    }

    public String getStopsTimesTrip() {

        doListStationTimePlan();

        RowSetIterator iterator =
            ((DCBindingContainer) BindingContext.getCurrent().getCurrentBindingsEntry()).findIteratorBinding("ListStationPlan1Iterator").getViewObject().createRowSetIterator(null);
        Row row = null;
        iterator.reset();
        String jsArray = "[";
        String ligne = "";

        while (iterator.hasNext()) {
            row = iterator.next();
            if ((row.getAttribute("StopLat") != null) && (row.getAttribute("StopLon") != null))
                jsArray +=
                    "{\"t\": \"" + row.getAttribute("Delstaa") + "\"," + "\"h\": \"" + row.getAttribute("Times") +
                    "\"," + "\"l\": " + row.getAttribute("StopLat") + "," + "\"g\": " + row.getAttribute("StopLon") +
                    "},";

        }
        centre = row.getAttribute("Deccent").toString();
        iterator.closeRowSetIterator();
        jsArray += "]";


        jsArray = jsArray.replace("},]", "}]");
        //System.out.println("trips stops  :" + jsArray);

        return jsArray;
    }


    public String getTripPlan() {
        RowSetIterator iteratorPlan =
            ((DCBindingContainer) BindingContext.getCurrent().getCurrentBindingsEntry()).findIteratorBinding("TripsplanView4Iterator").getViewObject().createRowSetIterator(null);
        Row rowPlann = null;
        iteratorPlan.reset();
        String jsArrayLine = "[";
        String ligne = "";
        String stoptrips = "";

        while (iteratorPlan.hasNext()) {
            rowPlann = iteratorPlan.next();
            jsArrayLine += "{\"ligne\": \"" + rowPlann.getAttribute("Denumli") + "\"},";


        }
        iteratorPlan.closeRowSetIterator();
        jsArrayLine += "]";


        jsArrayLine = jsArrayLine.replace("},]", "}]");
        //System.out.println("trips stops  :" + jsArrayLine);

        return jsArrayLine;
    }


    public String doListStationTimePlan() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("ListStationTimePlan");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }


}
