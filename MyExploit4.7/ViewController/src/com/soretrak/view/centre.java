package com.soretrak.view;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.model.BindingContext;
import oracle.adf.model.binding.DCBindingContainer;
import oracle.adf.model.binding.DCIteratorBinding;
import oracle.adf.view.rich.component.rich.input.RichInputText;
import oracle.adf.view.rich.component.rich.input.RichSelectOneChoice;
import oracle.adf.view.rich.component.rich.output.RichOutputText;
import oracle.adf.view.rich.event.DialogEvent;
import oracle.adf.view.rich.event.PopupCanceledEvent;
import oracle.adf.view.rich.event.PopupFetchEvent;

import oracle.binding.AttributeBinding;
import oracle.binding.BindingContainer;
import oracle.binding.OperationBinding;

import oracle.jbo.Row;

import oracle.jbo.RowSetIterator;

import org.apache.myfaces.trinidad.event.SelectionEvent;

public class centre {
    private RichInputText lib;
    private RichSelectOneChoice peri;
    private RichInputText bonus;
    
    String isthere;
    private RichOutputText nbvoy;
    private RichInputText nbvoy1;

    public void setIsthere(String isthere) {
        this.isthere = isthere;
    }

    public String getIsthere() {
        
        /*BindingContainer bindings = getBindings();
        AttributeBinding etat = (AttributeBinding) bindings.get("Etat");
        
        System.out.println("etat :"+ etat);
        if (etat.getInputValue().toString().compareTo("0") == 0) {
            lib.setDisabled(false);
            peri.setDisabled(false);
            bonus.setDisabled(false);
        } else {
            lib.setDisabled(true);
            peri.setDisabled(true);
            bonus.setDisabled(true);
        }*/
        return isthere;
    }

    public centre() {
    }

    public void onPopupFetchList(PopupFetchEvent popupFetchEvent) {
        if (popupFetchEvent.getLaunchSourceClientId().contains("badd")) {
            BindingContainer bindings = getBindings();
            OperationBinding operationBinding = bindings.getOperationBinding("CreateInsert");
            operationBinding.execute();

        }
    }

    public void onPopupCanceledList(PopupCanceledEvent popupCanceledEvent) {
        BindingContainer bindings = getBindings();
        /*OperationBinding operationBinding = bindings.getOperationBinding("Rollback");
        operationBinding.execute();*/

        OperationBinding operationBinding = bindings.getOperationBinding("Execute");
        operationBinding.execute();
    }

    public void onDialogList(DialogEvent dialogEvent) {
        DialogEvent.Outcome outcome = dialogEvent.getOutcome();
        if (outcome == DialogEvent.Outcome.ok) {
            save();
            ExecuteGroupes();
        } else
            cancel();
    }
    
    public BindingContainer getBindings() {
        return BindingContext.getCurrent().getCurrentBindingsEntry();
    }

    public String save() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("Commit");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

    public String cancel() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("Rollback");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

    public String ExecuteGroupes(){
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("Execute");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

    public String doDeleteGrp() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("Delete");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        
        save();
        
        ExecuteGroupes();
        return null;
    }

    public void onDeleteList(DialogEvent dialogEvent) {
        
        DialogEvent.Outcome outcome = dialogEvent.getOutcome();
        if (outcome == DialogEvent.Outcome.ok) {
            System.out.println("nbre voy. "+Integer.parseInt(nbvoy1.getValue().toString()));
            if (Integer.parseInt(nbvoy1.getValue().toString()) ==0)
                doDeleteGrp();
            else
             messageFaces("Vous ne pouvez pas supprimer ce groupe, des voyages sont affectées!!!");
        } else
            cancel();
    }

    public void setLib(RichInputText lib) {
        this.lib = lib;
    }

    public RichInputText getLib() {
        return lib;
    }

    public void setPeri(RichSelectOneChoice peri) {
        this.peri = peri;
    }

    public RichSelectOneChoice getPeri() {
        return peri;
    }

    public void setBonus(RichInputText bonus) {
        this.bonus = bonus;
    }

    public RichInputText getBonus() {
        return bonus;
    }

    

    


    public void enableDesableButton() {

         try{

                   BindingContext bc = BindingContext.getCurrent();

                   DCBindingContainer bindings = (DCBindingContainer)bc.getCurrentBindingsEntry();

                 // Get the Attachments iteraor

                 DCIteratorBinding glIter = bindings.findIteratorBinding("GroupExpView2");

                   if (glIter != null && glIter.getRowSetIterator().getRowCount() > 0) {

                       RowSetIterator rsi = glIter.getViewObject().createRowSetIterator(null);

                       Row glRow;

                       while (rsi.next() != null) {

                           glRow = rsi.getCurrentRow();

                           // Set “rendered” indicators
                            System.out.print("etat :" + glRow.getAttribute("Etat").toString());
                           if (glRow.getAttribute("Etat").toString().compareTo("1")==0){

                                       glRow.setAttribute("IsEnabled", "false");

                           }else{

                             glRow.setAttribute("IsEnabled", "true");

                           }

                       }

                       rsi.closeRowSetIterator();

                   }

         }catch(Exception e){

           e.printStackTrace();

           throw new RuntimeException(e);

         }

     }

    public void setNbvoy(RichOutputText nbvoy) {
        this.nbvoy = nbvoy;
    }

    public RichOutputText getNbvoy() {
        return nbvoy;
    }
    
    private void messageFaces(String mess) {
        FacesMessage fm = new FacesMessage(mess);
        fm.setSeverity(FacesMessage.SEVERITY_ERROR); //instead of SEVERITY_ERROR use SEVERITY_WARN
        FacesContext context = FacesContext.getCurrentInstance();
        context.addMessage(null, fm);

    }

    public void setNbvoy1(RichInputText nbvoy1) {
        this.nbvoy1 = nbvoy1;
    }

    public RichInputText getNbvoy1() {
        return nbvoy1;
    }
}
