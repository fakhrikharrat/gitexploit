package com.soretrak.view;

import javax.faces.event.ValueChangeEvent;

import oracle.adf.model.BindingContext;
import oracle.adf.view.rich.component.rich.data.RichColumn;
import oracle.adf.view.rich.component.rich.input.RichInputDate;
import oracle.adf.view.rich.component.rich.input.RichInputListOfValues;
import oracle.adf.view.rich.component.rich.input.RichInputText;
import oracle.adf.view.rich.component.rich.input.RichSelectOneChoice;
import oracle.adf.view.rich.component.rich.nav.RichButton;
import oracle.adf.view.rich.context.AdfFacesContext;
import oracle.adf.view.rich.event.DialogEvent;

import oracle.binding.BindingContainer;
import oracle.binding.OperationBinding;

import oracle.jbo.uicli.binding.JUCtrlListBinding;

public class AddMission {
    String isthere;
    private RichSelectOneChoice datecombo;
    private RichButton badd;
    private RichButton bmodif;
    private RichButton bdel;
    private RichColumn colInteg;
    private RichSelectOneChoice typemiss;
    private RichInputListOfValues ligne;
    private RichInputText repos;
    private RichInputDate datefin;
    private RichInputText dist;

    public void setIsthere(String isthere) {
        this.isthere = isthere;
    }

    public String getIsthere() {
        String etat = (String) AdfFacesContext.getCurrentInstance().getPageFlowScope().get("inputIU");

        if (etat.compareTo("M") == 0)
            datecombo.setDisabled(true);
        else
            datecombo.setDisabled(false);
       
      if (typemiss.getValue().toString().compareTo("2") == 0) {
            ligne.setVisible(true);
            repos.setVisible(true);
            datefin.setDisabled(true);
            dist.setDisabled(true);
        } else {
            ligne.setVisible(false);
            repos.setVisible(false);
            datefin.setDisabled(false);
            dist.setDisabled(false);
        }
       
       
        return isthere;
    }

    public AddMission() {
    }


    public void setDatecombo(RichSelectOneChoice datecombo) {
        this.datecombo = datecombo;
    }

    public RichSelectOneChoice getDatecombo() {
        return datecombo;
    }

    public void onDialogIntegMiss(DialogEvent dialogEvent) {
        DialogEvent.Outcome outcome = dialogEvent.getOutcome();
        if (outcome == DialogEvent.Outcome.ok) {

            doAddMiss2Plan();
            doUpdateIntegMiss();
            doSave();
            doExecuteMiss();
        } else
            doCancel();

    }

    public BindingContainer getBindings() {
        return BindingContext.getCurrent().getCurrentBindingsEntry();
    }

    public String doUpdateIntegMiss() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("updateIntegMiss");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

    public String doExecuteMiss() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("Execute");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

    public String doSave() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("Commit");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

    public String doCancel() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("Rollback");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

    public void setBadd(RichButton badd) {
        this.badd = badd;
    }

    public RichButton getBadd() {
        return badd;
    }

    public void setBmodif(RichButton bmodif) {
        this.bmodif = bmodif;
    }

    public RichButton getBmodif() {
        return bmodif;
    }

    public void setBdel(RichButton bdel) {
        this.bdel = bdel;
    }

    public RichButton getBdel() {
        return bdel;
    }

    public void setColInteg(RichColumn colInteg) {
        this.colInteg = colInteg;
    }

    public RichColumn getColInteg() {
        return colInteg;
    }

    public String doListNonInteg() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("ExecuteWithParams");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }

        badd.setVisible(true);
        bmodif.setVisible(true);
        bdel.setVisible(true);
        colInteg.setRendered(true);

        return null;
    }

    public String doListInteg() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("ExecuteWithParams1");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }

        badd.setVisible(false);
        bmodif.setVisible(false);
        bdel.setVisible(false);
        colInteg.setRendered(false);
        return null;
    }

    public String doAddMiss2Plan() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("addMissPlan");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

    public String doMAJHFin() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("updateHFIN");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
        return null;
    }

    public String doSaveBack() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("Commit");
        
        doMAJHFin();
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        }
    
        return "back";
    }

    public void setTypemiss(RichSelectOneChoice typemiss) {
        this.typemiss = typemiss;
    }

    public RichSelectOneChoice getTypemiss() {
        return typemiss;
    }

    public void setLigne(RichInputListOfValues ligne) {
        this.ligne = ligne;
    }

    public RichInputListOfValues getLigne() {
        return ligne;
    }

    public void setRepos(RichInputText repos) {
        this.repos = repos;
    }

    public RichInputText getRepos() {
        return repos;
    }

    public void setDatefin(RichInputDate datefin) {
        this.datefin = datefin;
    }

    public RichInputDate getDatefin() {
        return datefin;
    }

    public void onValueChangeType(ValueChangeEvent valueChangeEvent) {


        

        if (typemiss.getValue().toString().compareTo("2") == 0) {
            System.out.println(typemiss.getValue().toString());
            ligne.setVisible(true);
            repos.setVisible(true);
            datefin.setDisabled(true);
            dist.setDisabled(true);
        } else {
            System.out.println(typemiss.getValue().toString());
            ligne.setVisible(false);
            repos.setVisible(false);
            datefin.setDisabled(false);
            dist.setDisabled(false);
        }

    }

    public void setDist(RichInputText dist) {
        this.dist = dist;
    }

    public RichInputText getDist() {
        return dist;
    }
}
