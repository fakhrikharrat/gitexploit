package com.soretrak.model.eo;

import java.math.BigDecimal;

import java.sql.SQLException;
import java.sql.Timestamp;

import java.util.Calendar;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Date;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon May 30 17:29:06 UTC 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DrdmdlocImpl extends EntityImpl {
    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }
   
    
    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        LocId,
        Dectycl,
        Decclie,
        Respon,
        Cin,
        Tel,
        Decatvh,
        Idtyploc,
        Itineraire,
        Distance,
        Immo,
        DateDep,
        HeureDep,
        DateRet,
        HeureRet,
        MntLoc,
        Etat,
        UserCre,
        DateCre,
        UserMod,
        DateMod,
        Typpay,
        Decexer,
        Denummv,
        Observ,
        MntTheo,
        Drtyploc,
        Tripsplan,
        Drclien,
        Drcatve;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    static final long MILI_SECONDS_PER_DAY = 86400000;


    public static final int LOCID = AttributesEnum.LocId.index();
    public static final int DECTYCL = AttributesEnum.Dectycl.index();
    public static final int DECCLIE = AttributesEnum.Decclie.index();
    public static final int RESPON = AttributesEnum.Respon.index();
    public static final int CIN = AttributesEnum.Cin.index();
    public static final int TEL = AttributesEnum.Tel.index();
    public static final int DECATVH = AttributesEnum.Decatvh.index();
    public static final int IDTYPLOC = AttributesEnum.Idtyploc.index();
    public static final int ITINERAIRE = AttributesEnum.Itineraire.index();
    public static final int DISTANCE = AttributesEnum.Distance.index();
    public static final int IMMO = AttributesEnum.Immo.index();
    public static final int DATEDEP = AttributesEnum.DateDep.index();
    public static final int HEUREDEP = AttributesEnum.HeureDep.index();
    public static final int DATERET = AttributesEnum.DateRet.index();
    public static final int HEURERET = AttributesEnum.HeureRet.index();
    public static final int MNTLOC = AttributesEnum.MntLoc.index();
    public static final int ETAT = AttributesEnum.Etat.index();
    public static final int USERCRE = AttributesEnum.UserCre.index();
    public static final int DATECRE = AttributesEnum.DateCre.index();
    public static final int USERMOD = AttributesEnum.UserMod.index();
    public static final int DATEMOD = AttributesEnum.DateMod.index();
    public static final int TYPPAY = AttributesEnum.Typpay.index();
    public static final int DECEXER = AttributesEnum.Decexer.index();
    public static final int DENUMMV = AttributesEnum.Denummv.index();
    public static final int OBSERV = AttributesEnum.Observ.index();
    public static final int MNTTHEO = AttributesEnum.MntTheo.index();
    public static final int DRTYPLOC = AttributesEnum.Drtyploc.index();
    public static final int TRIPSPLAN = AttributesEnum.Tripsplan.index();
    public static final int DRCLIEN = AttributesEnum.Drclien.index();
    public static final int DRCATVE = AttributesEnum.Drcatve.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DrdmdlocImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.soretrak.model.eo.Drdmdloc");
    }


    /**
     * Gets the attribute value for LocId, using the alias name LocId.
     * @return the value of LocId
     */
    public DBSequence getLocId() {
        return (DBSequence) getAttributeInternal(LOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LocId.
     * @param value value to set the LocId
     */
    public void setLocId(DBSequence value) {
        setAttributeInternal(LOCID, value);
    }

    /**
     * Gets the attribute value for Dectycl, using the alias name Dectycl.
     * @return the value of Dectycl
     */
    public Integer getDectycl() {
        return (Integer) getAttributeInternal(DECTYCL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Dectycl.
     * @param value value to set the Dectycl
     */
    public void setDectycl(Integer value) {
        setAttributeInternal(DECTYCL, value);
    }

    /**
     * Gets the attribute value for Decclie, using the alias name Decclie.
     * @return the value of Decclie
     */
    public Long getDecclie() {
        return (Long) getAttributeInternal(DECCLIE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Decclie.
     * @param value value to set the Decclie
     */
    public void setDecclie(Long value) {
        setAttributeInternal(DECCLIE, value);
    }

    /**
     * Gets the attribute value for Respon, using the alias name Respon.
     * @return the value of Respon
     */
    public String getRespon() {
        return (String) getAttributeInternal(RESPON);
    }

    /**
     * Sets <code>value</code> as the attribute value for Respon.
     * @param value value to set the Respon
     */
    public void setRespon(String value) {
        setAttributeInternal(RESPON, value);
    }

    /**
     * Gets the attribute value for Cin, using the alias name Cin.
     * @return the value of Cin
     */
    public String getCin() {
        return (String) getAttributeInternal(CIN);
    }

    /**
     * Sets <code>value</code> as the attribute value for Cin.
     * @param value value to set the Cin
     */
    public void setCin(String value) {
        setAttributeInternal(CIN, value);
    }

    /**
     * Gets the attribute value for Tel, using the alias name Tel.
     * @return the value of Tel
     */
    public String getTel() {
        return (String) getAttributeInternal(TEL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Tel.
     * @param value value to set the Tel
     */
    public void setTel(String value) {
        setAttributeInternal(TEL, value);
    }

    /**
     * Gets the attribute value for Decatvh, using the alias name Decatvh.
     * @return the value of Decatvh
     */
    public String getDecatvh() {
        return (String) getAttributeInternal(DECATVH);
    }

    /**
     * Sets <code>value</code> as the attribute value for Decatvh.
     * @param value value to set the Decatvh
     */
    public void setDecatvh(String value) {
        setAttributeInternal(DECATVH, value);
    }

    /**
     * Gets the attribute value for Idtyploc, using the alias name Idtyploc.
     * @return the value of Idtyploc
     */
    public String getIdtyploc() {
        return (String) getAttributeInternal(IDTYPLOC);
    }

    /**
     * Sets <code>value</code> as the attribute value for Idtyploc.
     * @param value value to set the Idtyploc
     */
    public void setIdtyploc(String value) {
        setAttributeInternal(IDTYPLOC, value);
    }

    /**
     * Gets the attribute value for Itineraire, using the alias name Itineraire.
     * @return the value of Itineraire
     */
    public String getItineraire() {
        return (String) getAttributeInternal(ITINERAIRE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Itineraire.
     * @param value value to set the Itineraire
     */
    public void setItineraire(String value) {
        setAttributeInternal(ITINERAIRE, value);
    }

    /**
     * Gets the attribute value for Distance, using the alias name Distance.
     * @return the value of Distance
     */
    public Integer getDistance() {
        return (Integer) getAttributeInternal(DISTANCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Distance.
     * @param value value to set the Distance
     */
    public void setDistance(Integer value) {
        setAttributeInternal(DISTANCE, value);
    }

    /**
     * Gets the attribute value for Immo, using the alias name Immo.
     * @return the value of Immo
     */
    public Integer getImmo() {
        return (Integer) getAttributeInternal(IMMO);
    }

    /**
     * Sets <code>value</code> as the attribute value for Immo.
     * @param value value to set the Immo
     */
    public void setImmo(Integer value) {
        setAttributeInternal(IMMO, value);
    }

    /**
     * Gets the attribute value for DateDep, using the alias name DateDep.
     * @return the value of DateDep
     */
    public Date getDateDep() {
        return (Date) getAttributeInternal(DATEDEP);
    }

    /**
     * Sets <code>value</code> as the attribute value for DateDep.
     * @param value value to set the DateDep
     */
    public void setDateDep(Date value) {
        setAttributeInternal(DATEDEP, value);
    }

    /**
     * Gets the attribute value for HeureDep, using the alias name HeureDep.
     * @return the value of HeureDep
     */
    public Date getHeureDep() {
        return (Date) getAttributeInternal(HEUREDEP);
    }

    /**
     * Sets <code>value</code> as the attribute value for HeureDep.
     * @param value value to set the HeureDep
     */
    public void setHeureDep(Date value) {
        setAttributeInternal(HEUREDEP, value);
    }

    /**
     * Gets the attribute value for DateRet, using the alias name DateRet.
     * @return the value of DateRet
     */
    public Date getDateRet() {
        return (Date) getAttributeInternal(DATERET);
    }

    /**
     * Sets <code>value</code> as the attribute value for DateRet.
     * @param value value to set the DateRet
     */
    public void setDateRet(Date value) {
        setAttributeInternal(DATERET, value);
    }

    /**
     * Gets the attribute value for HeureRet, using the alias name HeureRet.
     * @return the value of HeureRet
     */
    public Date getHeureRet() {
        return (Date) getAttributeInternal(HEURERET);
    }

    /**
     * Sets <code>value</code> as the attribute value for HeureRet.
     * @param value value to set the HeureRet
     */
    public void setHeureRet(Date value) {
        setAttributeInternal(HEURERET, value);
    }

    /**
     * Gets the attribute value for MntLoc, using the alias name MntLoc.
     * @return the value of MntLoc
     */
    public BigDecimal getMntLoc() {
        return (BigDecimal) getAttributeInternal(MNTLOC);
    }

    /**
     * Sets <code>value</code> as the attribute value for MntLoc.
     * @param value value to set the MntLoc
     */
    public void setMntLoc(BigDecimal value) {
        setAttributeInternal(MNTLOC, value);
    }

    /**
     * Gets the attribute value for Etat, using the alias name Etat.
     * @return the value of Etat
     */
    public String getEtat() {
        return (String) getAttributeInternal(ETAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Etat.
     * @param value value to set the Etat
     */
    public void setEtat(String value) {
        setAttributeInternal(ETAT, value);
    }

    /**
     * Gets the attribute value for UserCre, using the alias name UserCre.
     * @return the value of UserCre
     */
    public String getUserCre() {
        return (String) getAttributeInternal(USERCRE);
    }

    /**
     * Gets the attribute value for DateCre, using the alias name DateCre.
     * @return the value of DateCre
     */
    public Timestamp getDateCre() {
        return (Timestamp) getAttributeInternal(DATECRE);
    }

    /**
     * Gets the attribute value for UserMod, using the alias name UserMod.
     * @return the value of UserMod
     */
    public String getUserMod() {
        return (String) getAttributeInternal(USERMOD);
    }

    /**
     * Gets the attribute value for DateMod, using the alias name DateMod.
     * @return the value of DateMod
     */
    public Timestamp getDateMod() {
        return (Timestamp) getAttributeInternal(DATEMOD);
    }

    /**
     * Gets the attribute value for Typpay, using the alias name Typpay.
     * @return the value of Typpay
     */
    public String getTyppay() {
        return (String) getAttributeInternal(TYPPAY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Typpay.
     * @param value value to set the Typpay
     */
    public void setTyppay(String value) {
        setAttributeInternal(TYPPAY, value);
    }

    /**
     * Gets the attribute value for Decexer, using the alias name Decexer.
     * @return the value of Decexer
     */
    public Integer getDecexer() {
        return (Integer) getAttributeInternal(DECEXER);
    }

    /**
     * Sets <code>value</code> as the attribute value for Decexer.
     * @param value value to set the Decexer
     */
    public void setDecexer(Integer value) {
        setAttributeInternal(DECEXER, value);
    }

    /**
     * Gets the attribute value for Denummv, using the alias name Denummv.
     * @return the value of Denummv
     */
    public Integer getDenummv() {
        return (Integer) getAttributeInternal(DENUMMV);
    }

    /**
     * Sets <code>value</code> as the attribute value for Denummv.
     * @param value value to set the Denummv
     */
    public void setDenummv(Integer value) {
        setAttributeInternal(DENUMMV, value);
    }

    /**
     * Gets the attribute value for Observ, using the alias name Observ.
     * @return the value of Observ
     */
    public String getObserv() {
        return (String) getAttributeInternal(OBSERV);
    }

    /**
     * Sets <code>value</code> as the attribute value for Observ.
     * @param value value to set the Observ
     */
    public void setObserv(String value) {
        setAttributeInternal(OBSERV, value);
    }


    /**
     * Gets the attribute value for MntTheo, using the alias name MntTheo.
     * @return the value of MntTheo
     */
    public BigDecimal getMntTheo() {
        return (BigDecimal) getAttributeInternal(MNTTHEO);
    }

    /**
     * Sets <code>value</code> as the attribute value for MntTheo.
     * @param value value to set the MntTheo
     */
    public void setMntTheo(BigDecimal value) {
        setAttributeInternal(MNTTHEO, value);
    }


    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getDrtyploc() {
        return (EntityImpl) getAttributeInternal(DRTYPLOC);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setDrtyploc(EntityImpl value) {
        setAttributeInternal(DRTYPLOC, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTripsplan() {
        return (RowIterator) getAttributeInternal(TRIPSPLAN);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getDrclien() {
        return (EntityImpl) getAttributeInternal(DRCLIEN);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setDrclien(EntityImpl value) {
        setAttributeInternal(DRCLIEN, value);
    }


    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getDrcatve() {
        return (EntityImpl) getAttributeInternal(DRCATVE);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setDrcatve(EntityImpl value) {
        setAttributeInternal(DRCATVE, value);
    }


    /**
     * @param locId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence locId) {
        return new Key(new Object[] { locId });
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
      //  super.doDML(operation, e);
      if (operation == DML_INSERT) {
              /* write PRE-INSERT trigger-like code here */
            
             this.setDateRet( getNewDate());
           
             super.doDML(operation, e); /* Don't call the super and do something
                                         else to write ON-INSERT trigger-like code */
              /* write POST-INSERT trigger-like code here */
          }
          else if (operation == DML_UPDATE) {
              /* write PRE-UPDATE trigger-like code here */
              this.setDateRet( getNewDate());
              
              super.doDML(operation, e); /* Don't call the super and do something
                                         else to write ON-UPDATE trigger-like code here */
              /* write POST-UPDATE trigger-like code here */
          }
          else if (operation == DML_DELETE) {
              /* write PRE-DELETE trigger-like code here */
              super.doDML(operation, e); /* Don't call the super and do something
                                         else to write ON-DELETE trigger-like code here */
              /* write POST-DELETE trigger-like code here */
          }    
    }
    public Date getNewDate()  {
        
       Date valueDate = (Date)this.getDateDep();                                     
        /*Calendar cal = Calendar.getInstance(); 
        cal.setTime(new java.util.Date(valueDate.timestampValue().getTime()));
        cal.add(Calendar.DATE, this.getImmo());
        cal.clear(Calendar.HOUR);
        cal.clear(Calendar.MINUTE);
        cal.clear(Calendar.SECOND);
        cal.clear(Calendar.MILLISECOND);
        Date newDate=null;
        try {
            newDate = new oracle.jbo.domain.Date(cal.getTimeInMillis());
        } catch (SQLException e) {
        }
        System.out.println("aller :"+valueDate + " ret " + newDate);
        return (newDate);*/
       Timestamp ts = valueDate.timestampValue();
              long nextDatesSecs = ts.getTime() + (MILI_SECONDS_PER_DAY * this.getImmo());
              System.out.println("retour :" + new Date( new Timestamp(nextDatesSecs)));
              return new Date( new Timestamp(nextDatesSecs));
        
    }
}

