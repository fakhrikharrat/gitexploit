package com.soretrak.model.eo;

import java.sql.Timestamp;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Date;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 02 17:47:08 UTC 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TripsImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        TripId,
        Denumli,
        ServiceId,
        TripHeadsign,
        TripShortName,
        DirectionId,
        BlockId,
        TimeDepart,
        TimeReturn,
        Num,
        TimeArrival,
        Haveret,
        TimeNret,
        TripNid,
        Calendar,
        StopTimes,
        Drligne,
        GroupExp,
        Tripsplan;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int TRIPID = AttributesEnum.TripId.index();
    public static final int DENUMLI = AttributesEnum.Denumli.index();
    public static final int SERVICEID = AttributesEnum.ServiceId.index();
    public static final int TRIPHEADSIGN = AttributesEnum.TripHeadsign.index();
    public static final int TRIPSHORTNAME = AttributesEnum.TripShortName.index();
    public static final int DIRECTIONID = AttributesEnum.DirectionId.index();
    public static final int BLOCKID = AttributesEnum.BlockId.index();
    public static final int TIMEDEPART = AttributesEnum.TimeDepart.index();
    public static final int TIMERETURN = AttributesEnum.TimeReturn.index();
    public static final int NUM = AttributesEnum.Num.index();
    public static final int TIMEARRIVAL = AttributesEnum.TimeArrival.index();
    public static final int HAVERET = AttributesEnum.Haveret.index();
    public static final int TIMENRET = AttributesEnum.TimeNret.index();
    public static final int TRIPNID = AttributesEnum.TripNid.index();
    public static final int CALENDAR = AttributesEnum.Calendar.index();
    public static final int STOPTIMES = AttributesEnum.StopTimes.index();
    public static final int DRLIGNE = AttributesEnum.Drligne.index();
    public static final int GROUPEXP = AttributesEnum.GroupExp.index();
    public static final int TRIPSPLAN = AttributesEnum.Tripsplan.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TripsImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.soretrak.model.eo.Trips");
    }


    /**
     * Gets the attribute value for TripId, using the alias name TripId.
     * @return the value of TripId
     */
    public DBSequence getTripId() {
        return (DBSequence) getAttributeInternal(TRIPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TripId.
     * @param value value to set the TripId
     */
    public void setTripId(DBSequence value) {
        setAttributeInternal(TRIPID, value);
    }

    /**
     * Gets the attribute value for Denumli, using the alias name Denumli.
     * @return the value of Denumli
     */
    public String getDenumli() {
        return (String) getAttributeInternal(DENUMLI);
    }

    /**
     * Sets <code>value</code> as the attribute value for Denumli.
     * @param value value to set the Denumli
     */
    public void setDenumli(String value) {
        setAttributeInternal(DENUMLI, value);
    }

    /**
     * Gets the attribute value for ServiceId, using the alias name ServiceId.
     * @return the value of ServiceId
     */
    public Integer getServiceId() {
        return (Integer) getAttributeInternal(SERVICEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ServiceId.
     * @param value value to set the ServiceId
     */
    public void setServiceId(Integer value) {
        setAttributeInternal(SERVICEID, value);
    }

    /**
     * Gets the attribute value for TripHeadsign, using the alias name TripHeadsign.
     * @return the value of TripHeadsign
     */
    public String getTripHeadsign() {
        return (String) getAttributeInternal(TRIPHEADSIGN);
    }

    /**
     * Sets <code>value</code> as the attribute value for TripHeadsign.
     * @param value value to set the TripHeadsign
     */
    public void setTripHeadsign(String value) {
        setAttributeInternal(TRIPHEADSIGN, value);
    }

    /**
     * Gets the attribute value for TripShortName, using the alias name TripShortName.
     * @return the value of TripShortName
     */
    public String getTripShortName() {
        return (String) getAttributeInternal(TRIPSHORTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for TripShortName.
     * @param value value to set the TripShortName
     */
    public void setTripShortName(String value) {
        setAttributeInternal(TRIPSHORTNAME, value);
    }

    /**
     * Gets the attribute value for DirectionId, using the alias name DirectionId.
     * @return the value of DirectionId
     */
    public String getDirectionId() {
        return (String) getAttributeInternal(DIRECTIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DirectionId.
     * @param value value to set the DirectionId
     */
    public void setDirectionId(String value) {
        setAttributeInternal(DIRECTIONID, value);
    }

    /**
     * Gets the attribute value for BlockId, using the alias name BlockId.
     * @return the value of BlockId
     */
    public Integer getBlockId() {
        return (Integer) getAttributeInternal(BLOCKID);
    }

    /**
     * Sets <code>value</code> as the attribute value for BlockId.
     * @param value value to set the BlockId
     */
    public void setBlockId(Integer value) {
        setAttributeInternal(BLOCKID, value);
    }

    /**
     * Gets the attribute value for TimeDepart, using the alias name TimeDepart.
     * @return the value of TimeDepart
     */
    public Timestamp getTimeDepart() {
        return (Timestamp) getAttributeInternal(TIMEDEPART);
    }

    /**
     * Sets <code>value</code> as the attribute value for TimeDepart.
     * @param value value to set the TimeDepart
     */
    public void setTimeDepart(Timestamp value) {
        setAttributeInternal(TIMEDEPART, value);
    }

    /**
     * Gets the attribute value for TimeReturn, using the alias name TimeReturn.
     * @return the value of TimeReturn
     */
    public Timestamp getTimeReturn() {
        return (Timestamp) getAttributeInternal(TIMERETURN);
    }

    /**
     * Sets <code>value</code> as the attribute value for TimeReturn.
     * @param value value to set the TimeReturn
     */
    public void setTimeReturn(Timestamp value) {
        setAttributeInternal(TIMERETURN, value);
    }

    /**
     * Gets the attribute value for Num, using the alias name Num.
     * @return the value of Num
     */
    public Integer getNum() {
        return (Integer) getAttributeInternal(NUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for Num.
     * @param value value to set the Num
     */
    public void setNum(Integer value) {
        setAttributeInternal(NUM, value);
    }

    /**
     * Gets the attribute value for TimeArrival, using the alias name TimeArrival.
     * @return the value of TimeArrival
     */
    public Timestamp getTimeArrival() {
        return (Timestamp) getAttributeInternal(TIMEARRIVAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for TimeArrival.
     * @param value value to set the TimeArrival
     */
    public void setTimeArrival(Timestamp value) {
        setAttributeInternal(TIMEARRIVAL, value);
    }

    /**
     * Gets the attribute value for Haveret, using the alias name Haveret.
     * @return the value of Haveret
     */
    public String getHaveret() {
        return (String) getAttributeInternal(HAVERET);
    }

    /**
     * Sets <code>value</code> as the attribute value for Haveret.
     * @param value value to set the Haveret
     */
    public void setHaveret(String value) {
        setAttributeInternal(HAVERET, value);
    }

    /**
     * Gets the attribute value for TimeNret, using the alias name TimeNret.
     * @return the value of TimeNret
     */
    public Timestamp getTimeNret() {
        return (Timestamp) getAttributeInternal(TIMENRET);
    }

    /**
     * Sets <code>value</code> as the attribute value for TimeNret.
     * @param value value to set the TimeNret
     */
    public void setTimeNret(Timestamp value) {
        setAttributeInternal(TIMENRET, value);
    }

    /**
     * Gets the attribute value for TripNid, using the alias name TripNid.
     * @return the value of TripNid
     */
    public Integer getTripNid() {
        return (Integer) getAttributeInternal(TRIPNID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TripNid.
     * @param value value to set the TripNid
     */
    public void setTripNid(Integer value) {
        setAttributeInternal(TRIPNID, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getCalendar() {
        return (EntityImpl) getAttributeInternal(CALENDAR);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setCalendar(EntityImpl value) {
        setAttributeInternal(CALENDAR, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getStopTimes() {
        return (RowIterator) getAttributeInternal(STOPTIMES);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getDrligne() {
        return (EntityImpl) getAttributeInternal(DRLIGNE);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setDrligne(EntityImpl value) {
        setAttributeInternal(DRLIGNE, value);
    }

    /**
     * @return the associated entity GroupExpImpl.
     */
    public GroupExpImpl getGroupExp() {
        return (GroupExpImpl) getAttributeInternal(GROUPEXP);
    }

    /**
     * Sets <code>value</code> as the associated entity GroupExpImpl.
     */
    public void setGroupExp(GroupExpImpl value) {
        setAttributeInternal(GROUPEXP, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTripsplan() {
        return (RowIterator) getAttributeInternal(TRIPSPLAN);
    }


    /**
     * Validation method for Trips.
     */
    public boolean validateTripsARTimeNull() {
        if ((this.getHaveret().compareTo("O") == 0))
            if (this.getTimeNret() == null)
                return false;
            else
                return true;
        else
            return true;


    }

    /**
     * @param tripId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence tripId) {
        return new Key(new Object[] { tripId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_INSERT) {
            /* write PRE-INSERT trigger-like code here */

            this.setTimeReturn(this.getTimeArrival());

            super.doDML(operation, e); /* Don't call the super and do something
                                           else to write ON-INSERT trigger-like code */
            /* write POST-INSERT trigger-like code here */
            this.setTimeReturn(this.getTimeArrival());
            System.out.println(" " + this.getTimeArrival());
        } else if (operation == DML_UPDATE) {
            /* write PRE-UPDATE trigger-like code here */
            this.setTimeReturn(this.getTimeArrival());

            super.doDML(operation, e); /* Don't call the super and do something
                                           else to write ON-UPDATE trigger-like code here */
            /* write POST-UPDATE trigger-like code here */
            this.setTimeReturn(this.getTimeArrival());
            System.out.println(" " + this.getTimeArrival());
        } else if (operation == DML_DELETE) {
            /* write PRE-DELETE trigger-like code here */
            super.doDML(operation, e); /* Don't call the super and do something
                                           else to write ON-DELETE trigger-like code here */

            /* write POST-DELETE trigger-like code here */
        }
    }
}

