package com.soretrak.model.vo;

import java.sql.Timestamp;

import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowFinderFetchLimitExceededException;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.RowFinder;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu May 12 09:10:49 UTC 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DaysplanViewRowImpl extends ViewRowImpl implements com.soretrak.model.vo.common.DaysplanViewRow {


    public static final int ENTITY_DAYSPLAN = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Dateplan,
        Jour,
        Etat,
        UserCre,
        DateCre,
        UserMod,
        DateMod,
        tottrips,
        totkm,
        totrecette,
        totrecloc,
        totloc,
        totMiss,
        TripsplanView,
        EtatDaysView1;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DATEPLAN = AttributesEnum.Dateplan.index();
    public static final int JOUR = AttributesEnum.Jour.index();
    public static final int ETAT = AttributesEnum.Etat.index();
    public static final int USERCRE = AttributesEnum.UserCre.index();
    public static final int DATECRE = AttributesEnum.DateCre.index();
    public static final int USERMOD = AttributesEnum.UserMod.index();
    public static final int DATEMOD = AttributesEnum.DateMod.index();
    public static final int TOTTRIPS = AttributesEnum.tottrips.index();
    public static final int TOTKM = AttributesEnum.totkm.index();
    public static final int TOTRECETTE = AttributesEnum.totrecette.index();
    public static final int TOTRECLOC = AttributesEnum.totrecloc.index();
    public static final int TOTLOC = AttributesEnum.totloc.index();
    public static final int TOTMISS = AttributesEnum.totMiss.index();
    public static final int TRIPSPLANVIEW = AttributesEnum.TripsplanView.index();
    public static final int ETATDAYSVIEW1 = AttributesEnum.EtatDaysView1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DaysplanViewRowImpl() {
    }

    /**
     * Gets Daysplan entity object.
     * @return the Daysplan
     */
    public EntityImpl getDaysplan() {
        return (EntityImpl) getEntity(ENTITY_DAYSPLAN);
    }

    /**
     * Gets the attribute value for DATEPLAN using the alias name Dateplan.
     * @return the DATEPLAN
     */
    public Date getDateplan() {
        return (Date) getAttributeInternal(DATEPLAN);
    }

    /**
     * Sets <code>value</code> as attribute value for DATEPLAN using the alias name Dateplan.
     * @param value value to set the DATEPLAN
     */
    public void setDateplan(Date value) {
        setAttributeInternal(DATEPLAN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Jour.
     * @return the Jour
     */
    public String getJour() {
        return (String) getAttributeInternal(JOUR);
    }

    /**
     * Gets the attribute value for the calculated attribute tottrips.
     * @return the tottrips
     */
    public Integer gettottrips() {
        return (Integer) getAttributeInternal(TOTTRIPS);
    }

    /**
     * Gets the attribute value for the calculated attribute totkm.
     * @return the totkm
     */
    public Integer gettotkm() {
        return (Integer) getAttributeInternal(TOTKM);
    }

    /**
     * Gets the attribute value for the calculated attribute totrecette.
     * @return the totrecette
     */
    public Number gettotrecette() {
        return (Number) getAttributeInternal(TOTRECETTE);
    }

    /**
     * Gets the attribute value for the calculated attribute totrecloc.
     * @return the totrecloc
     */
    public Integer gettotrecloc() {
        return (Integer) getAttributeInternal(TOTRECLOC);
    }

    /**
     * Gets the attribute value for the calculated attribute totloc.
     * @return the totloc
     */
    public Integer gettotloc() {
        return (Integer) getAttributeInternal(TOTLOC);
    }

    /**
     * Gets the attribute value for the calculated attribute totMiss.
     * @return the totMiss
     */
    public Integer gettotMiss() {
        return (Integer) getAttributeInternal(TOTMISS);
    }

    /**
     * Gets the attribute value for ETAT using the alias name Etat.
     * @return the ETAT
     */
    public String getEtat() {
        return (String) getAttributeInternal(ETAT);
    }

    /**
     * Sets <code>value</code> as attribute value for ETAT using the alias name Etat.
     * @param value value to set the ETAT
     */
    public void setEtat(String value) {
        setAttributeInternal(ETAT, value);
    }

    /**
     * Gets the attribute value for USER_CRE using the alias name UserCre.
     * @return the USER_CRE
     */
    public String getUserCre() {
        return (String) getAttributeInternal(USERCRE);
    }

    /**
     * Gets the attribute value for DATE_CRE using the alias name DateCre.
     * @return the DATE_CRE
     */
    public Timestamp getDateCre() {
        return (Timestamp) getAttributeInternal(DATECRE);
    }

    /**
     * Gets the attribute value for USER_MOD using the alias name UserMod.
     * @return the USER_MOD
     */
    public String getUserMod() {
        return (String) getAttributeInternal(USERMOD);
    }

    /**
     * Gets the attribute value for DATE_MOD using the alias name DateMod.
     * @return the DATE_MOD
     */
    public Timestamp getDateMod() {
        return (Timestamp) getAttributeInternal(DATEMOD);
    }


    /**
     * Gets the associated <code>RowIterator</code> using master-detail link TripsplanView.
     */
    public RowIterator getTripsplanView() {
        return (RowIterator) getAttributeInternal(TRIPSPLANVIEW);
    }


    /**
     * Gets the view accessor <code>RowSet</code> EtatDaysView1.
     */
    public RowSet getEtatDaysView1() {
        return (RowSet) getAttributeInternal(ETATDAYSVIEW1);
    }

    public void setDataPlanGroup(Integer group, Integer chauff, Integer rec, String bus) {
        RowSet detplan = (RowSet) getTripsplanView();
        TripsplanViewRowImpl currentdetplan = new TripsplanViewRowImpl();
        while (detplan.hasNext()) {
            currentdetplan = (TripsplanViewRowImpl) detplan.next();
            
            if ((currentdetplan.getTypepl().compareTo("R") == 0))
                if (currentdetplan.getNum().compareTo(group) == 0) {
    
                    System.out.println(" tripid :"+currentdetplan.getTripId()  +"type :" +currentdetplan.getTypepl() + " current groupe :"+ currentdetplan.getNum() + " grp :" + group);
                    
                    if (currentdetplan.getEtat().compareTo("P") == 0) {
                        currentdetplan.setChauplan(chauff);
                        currentdetplan.setRecplan(rec);
                        currentdetplan.setVehicpaln(bus);
                    } else if (currentdetplan.getEtat().compareTo("E") == 0) {
                        currentdetplan.setChauexec(chauff);
                        currentdetplan.setRecexec(rec);
                        currentdetplan.setVehicexec(bus);
                    }
    
    
                }
        }
        

        //doSave();
    }

    public void updateEtatDaysPlan(String value) {

        //update execution
        if (this.getEtat().compareTo("P") == 0) {
            RowSet detplan = (RowSet) getTripsplanView();
            while (detplan.hasNext()) {
                TripsplanViewRowImpl currentdetplan = (TripsplanViewRowImpl) detplan.next();

                currentdetplan.setChauexec(currentdetplan.getChauplan());
                currentdetplan.setRecexec(currentdetplan.getRecplan());
                currentdetplan.setVehicexec(currentdetplan.getVehicpaln());
            }

        }
        this.setEtat(value);
        doSave();

    }

    public void doSave() {
        try {
            getDBTransaction().commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    public void updateDataPlantExec() {

        if (this.getEtat().compareTo("P") == 0) {
            RowSet detplan = (RowSet) getTripsplanView();
            while (detplan.hasNext()) {
                TripsplanViewRowImpl currentdetplan = (TripsplanViewRowImpl) detplan.next();

                currentdetplan.setChauexec(currentdetplan.getChauplan());
                currentdetplan.setRecexec(currentdetplan.getRecplan());
                currentdetplan.setVehicexec(currentdetplan.getVehicpaln());
            }
            doSave();
        }
    }

}

