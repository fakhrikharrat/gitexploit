package com.soretrak.model.vo;

import com.soretrak.model.eo.GroupExpImpl;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jun 24 11:31:53 UTC 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class GroupExpViewRowImpl extends ViewRowImpl implements com.soretrak.model.vo.common.GroupExpViewRow {
    public static final int ENTITY_GROUPEXP = 0;
    public static final int ENTITY_DRCENTR = 1;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Num,
        Decoper,
        Amp,
        DateCre,
        DateMod,
        Etat,
        Libelle,
        UserCre,
        UserMod,
        Deccent,
        Delcent,
        Deccent1,
        ArDelcent,
        TimeStart,
        TimeEnd,
        theoamp,
        nbretrips,
        begin,
        nbrehrelle,
        taxtrav,
        IsEnabled,
        Typgrp,
        ViewAttr,
        DrperioView,
        TripsView,
        DrcentrView,
        DrperioView1,
        EtatView1,
        TypeGrpView1;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int NUM = AttributesEnum.Num.index();
    public static final int DECOPER = AttributesEnum.Decoper.index();
    public static final int AMP = AttributesEnum.Amp.index();
    public static final int DATECRE = AttributesEnum.DateCre.index();
    public static final int DATEMOD = AttributesEnum.DateMod.index();
    public static final int ETAT = AttributesEnum.Etat.index();
    public static final int LIBELLE = AttributesEnum.Libelle.index();
    public static final int USERCRE = AttributesEnum.UserCre.index();
    public static final int USERMOD = AttributesEnum.UserMod.index();
    public static final int DECCENT = AttributesEnum.Deccent.index();
    public static final int DELCENT = AttributesEnum.Delcent.index();
    public static final int DECCENT1 = AttributesEnum.Deccent1.index();
    public static final int ARDELCENT = AttributesEnum.ArDelcent.index();
    public static final int TIMESTART = AttributesEnum.TimeStart.index();
    public static final int TIMEEND = AttributesEnum.TimeEnd.index();
    public static final int THEOAMP = AttributesEnum.theoamp.index();
    public static final int NBRETRIPS = AttributesEnum.nbretrips.index();
    public static final int BEGIN = AttributesEnum.begin.index();
    public static final int NBREHRELLE = AttributesEnum.nbrehrelle.index();
    public static final int TAXTRAV = AttributesEnum.taxtrav.index();
    public static final int ISENABLED = AttributesEnum.IsEnabled.index();
    public static final int TYPGRP = AttributesEnum.Typgrp.index();
    public static final int VIEWATTR = AttributesEnum.ViewAttr.index();
    public static final int DRPERIOVIEW = AttributesEnum.DrperioView.index();
    public static final int TRIPSVIEW = AttributesEnum.TripsView.index();
    public static final int DRCENTRVIEW = AttributesEnum.DrcentrView.index();
    public static final int DRPERIOVIEW1 = AttributesEnum.DrperioView1.index();
    public static final int ETATVIEW1 = AttributesEnum.EtatView1.index();
    public static final int TYPEGRPVIEW1 = AttributesEnum.TypeGrpView1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public GroupExpViewRowImpl() {
    }

    /**
     * Gets GroupExp entity object.
     * @return the GroupExp
     */
    public GroupExpImpl getGroupExp() {
        return (GroupExpImpl) getEntity(ENTITY_GROUPEXP);
    }

    /**
     * Gets Drcentr entity object.
     * @return the Drcentr
     */
    public EntityImpl getDrcentr() {
        return (EntityImpl) getEntity(ENTITY_DRCENTR);
    }

    /**
     * Gets the attribute value for NUM using the alias name Num.
     * @return the NUM
     */
    public DBSequence getNum() {
        return (DBSequence) getAttributeInternal(NUM);
    }

    /**
     * Sets <code>value</code> as attribute value for NUM using the alias name Num.
     * @param value value to set the NUM
     */
    public void setNum(DBSequence value) {
        setAttributeInternal(NUM, value);
    }

    /**
     * Gets the attribute value for DECOPER using the alias name Decoper.
     * @return the DECOPER
     */
    public String getDecoper() {
        return (String) getAttributeInternal(DECOPER);
    }

    /**
     * Sets <code>value</code> as attribute value for DECOPER using the alias name Decoper.
     * @param value value to set the DECOPER
     */
    public void setDecoper(String value) {
        setAttributeInternal(DECOPER, value);
    }

    /**
     * Gets the attribute value for AMP using the alias name Amp.
     * @return the AMP
     */
    public BigDecimal getAmp() {
        return (BigDecimal) getAttributeInternal(AMP);
    }

    /**
     * Sets <code>value</code> as attribute value for AMP using the alias name Amp.
     * @param value value to set the AMP
     */
    public void setAmp(BigDecimal value) {
        setAttributeInternal(AMP, value);
    }

    /**
     * Gets the attribute value for DATE_CRE using the alias name DateCre.
     * @return the DATE_CRE
     */
    public Timestamp getDateCre() {
        return (Timestamp) getAttributeInternal(DATECRE);
    }

    /**
     * Gets the attribute value for DATE_MOD using the alias name DateMod.
     * @return the DATE_MOD
     */
    public Timestamp getDateMod() {
        return (Timestamp) getAttributeInternal(DATEMOD);
    }

    /**
     * Gets the attribute value for ETAT using the alias name Etat.
     * @return the ETAT
     */
    public String getEtat() {
        return (String) getAttributeInternal(ETAT);
    }

    /**
     * Sets <code>value</code> as attribute value for ETAT using the alias name Etat.
     * @param value value to set the ETAT
     */
    public void setEtat(String value) {
        setAttributeInternal(ETAT, value);
    }

    /**
     * Gets the attribute value for LIBELLE using the alias name Libelle.
     * @return the LIBELLE
     */
    public String getLibelle() {
        return (String) getAttributeInternal(LIBELLE);
    }

    /**
     * Sets <code>value</code> as attribute value for LIBELLE using the alias name Libelle.
     * @param value value to set the LIBELLE
     */
    public void setLibelle(String value) {
        setAttributeInternal(LIBELLE, value);
    }

    /**
     * Gets the attribute value for USER_CRE using the alias name UserCre.
     * @return the USER_CRE
     */
    public String getUserCre() {
        return (String) getAttributeInternal(USERCRE);
    }

    /**
     * Gets the attribute value for USER_MOD using the alias name UserMod.
     * @return the USER_MOD
     */
    public String getUserMod() {
        return (String) getAttributeInternal(USERMOD);
    }

    /**
     * Gets the attribute value for DECCENT using the alias name Deccent.
     * @return the DECCENT
     */
    public Integer getDeccent() {
        return (Integer) getAttributeInternal(DECCENT);
    }

    /**
     * Sets <code>value</code> as attribute value for DECCENT using the alias name Deccent.
     * @param value value to set the DECCENT
     */
    public void setDeccent(Integer value) {
        setAttributeInternal(DECCENT, value);
    }

    /**
     * Gets the attribute value for DELCENT using the alias name Delcent.
     * @return the DELCENT
     */
    public String getDelcent() {
        return (String) getAttributeInternal(DELCENT);
    }

    /**
     * Sets <code>value</code> as attribute value for DELCENT using the alias name Delcent.
     * @param value value to set the DELCENT
     */
    public void setDelcent(String value) {
        setAttributeInternal(DELCENT, value);
    }

    /**
     * Gets the attribute value for DECCENT using the alias name Deccent1.
     * @return the DECCENT
     */
    public Integer getDeccent1() {
        return (Integer) getAttributeInternal(DECCENT1);
    }

    /**
     * Sets <code>value</code> as attribute value for DECCENT using the alias name Deccent1.
     * @param value value to set the DECCENT
     */
    public void setDeccent1(Integer value) {
        setAttributeInternal(DECCENT1, value);
    }

    /**
     * Gets the attribute value for AR_DELCENT using the alias name ArDelcent.
     * @return the AR_DELCENT
     */
    public String getArDelcent() {
        return (String) getAttributeInternal(ARDELCENT);
    }

    /**
     * Sets <code>value</code> as attribute value for AR_DELCENT using the alias name ArDelcent.
     * @param value value to set the AR_DELCENT
     */
    public void setArDelcent(String value) {
        setAttributeInternal(ARDELCENT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TimeStart.
     * @return the TimeStart
     */
    public Timestamp getTimeStart() {
        return (Timestamp) getAttributeInternal(TIMESTART);
    }

    /**
     * Gets the attribute value for the calculated attribute TimeEnd.
     * @return the TimeEnd
     */
    public Timestamp getTimeEnd() {
        return (Timestamp) getAttributeInternal(TIMEEND);
    }

    /**
     * Gets the attribute value for the calculated attribute theoamp.
     * @return the theoamp
     */
    public Float gettheoamp() {
        return (Float) getAttributeInternal(THEOAMP);
    }

    /**
     * Gets the attribute value for the calculated attribute nbretrips.
     * @return the nbretrips
     */
    public Integer getnbretrips() {
        return (Integer) getAttributeInternal(NBRETRIPS);
    }

    /**
     * Gets the attribute value for the calculated attribute begin.
     * @return the begin
     */
    public Timestamp getbegin() {
        return (Timestamp) getAttributeInternal(BEGIN);
    }

    /**
     * Gets the attribute value for the calculated attribute nbrehrelle.
     * @return the nbrehrelle
     */
    public Float getnbrehrelle() {
        return (Float) getAttributeInternal(NBREHRELLE);
    }

    /**
     * Gets the attribute value for the calculated attribute taxtrav.
     * @return the taxtrav
     */
    public Integer gettaxtrav() {
        return (Integer) getAttributeInternal(TAXTRAV);
    }

    /**
     * Gets the attribute value for the calculated attribute IsEnabled.
     * @return the IsEnabled
     */
    public String getIsEnabled() {
        return (String) getAttributeInternal(ISENABLED);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute IsEnabled.
     * @param value value to set the  IsEnabled
     */
    public void setIsEnabled(String value) {
        setAttributeInternal(ISENABLED, value);
    }

    /**
     * Gets the attribute value for TYPGRP using the alias name Typgrp.
     * @return the TYPGRP
     */
    public String getTypgrp() {
        return (String) getAttributeInternal(TYPGRP);
    }

    /**
     * Sets <code>value</code> as attribute value for TYPGRP using the alias name Typgrp.
     * @param value value to set the TYPGRP
     */
    public void setTypgrp(String value) {
        setAttributeInternal(TYPGRP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ViewAttr.
     * @return the ViewAttr
     */
    public Float getViewAttr() {
        return (Float) getAttributeInternal(VIEWATTR);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link DrperioView.
     */
    public Row getDrperioView() {
        return (Row) getAttributeInternal(DRPERIOVIEW);
    }

    /**
     * Sets the master-detail link DrperioView between this object and <code>value</code>.
     */
    public void setDrperioView(Row value) {
        setAttributeInternal(DRPERIOVIEW, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link TripsView.
     */
    public RowIterator getTripsView() {
        return (RowIterator) getAttributeInternal(TRIPSVIEW);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link DrcentrView.
     */
    public Row getDrcentrView() {
        return (Row) getAttributeInternal(DRCENTRVIEW);
    }

    /**
     * Sets the master-detail link DrcentrView between this object and <code>value</code>.
     */
    public void setDrcentrView(Row value) {
        setAttributeInternal(DRCENTRVIEW, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> DrperioView1.
     */
    public RowSet getDrperioView1() {
        return (RowSet) getAttributeInternal(DRPERIOVIEW1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> EtatView1.
     */
    public RowSet getEtatView1() {
        return (RowSet) getAttributeInternal(ETATVIEW1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> TypeGrpView1.
     */
    public RowSet getTypeGrpView1() {
        return (RowSet) getAttributeInternal(TYPEGRPVIEW1);
    }

    public void validateGrp() {

        switch (this.getEtat()) {
        case "0":
            this.setEtat("1");
            break;
        case "1":
            this.setEtat("2");
            break;
        case "2":
            this.setEtat("1");
            break;
        }
        doSave() ;


    }
    
    public void doSave() {
        try {
            getDBTransaction().commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

